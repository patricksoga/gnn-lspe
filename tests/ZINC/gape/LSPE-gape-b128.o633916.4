WARNING:root:The OGB package is out of date. Your version is 1.3.3, while the latest version is 1.3.4.
cuda available with GPU: NVIDIA GeForce GTX 1080 Ti
[I] Loading dataset ZINC...
train, test, val sizes : 10000 1000 1000
[I] Finished loading.
[I] Data load time: 10.8944s
Using 3 automata for GAPE
MODEL DETAILS:

MODEL/Total parameters: GatedGCN 534015
Using 3 automata for GAPE
[!] Adding random automaton graph positional encoding (32).
[!] Using 3 random automata.
Training Graphs:  10000
Validation Graphs:  1000
Test Graphs:  1000
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [0] Train Loss: 1.4809 | Train MAE: 1.4798 | Val Loss: 1.4196 | Val MAE: 1.4186 | Test MAE: 1.5338 | Time: 27.0844
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [1] Train Loss: 1.4096 | Train MAE: 1.4085 | Val Loss: 1.3010 | Val MAE: 1.2999 | Test MAE: 1.4119 | Time: 25.5037
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [2] Train Loss: 1.2611 | Train MAE: 1.2599 | Val Loss: 1.1037 | Val MAE: 1.1026 | Test MAE: 1.2090 | Time: 25.8621
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [3] Train Loss: 1.0275 | Train MAE: 1.0263 | Val Loss: 0.9091 | Val MAE: 0.9080 | Test MAE: 0.9534 | Time: 27.0981
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [4] Train Loss: 0.8970 | Train MAE: 0.8958 | Val Loss: 0.7393 | Val MAE: 0.7382 | Test MAE: 0.8114 | Time: 26.7683
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [5] Train Loss: 0.7828 | Train MAE: 0.7816 | Val Loss: 0.7010 | Val MAE: 0.6999 | Test MAE: 0.7657 | Time: 25.7101
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [6] Train Loss: 0.8018 | Train MAE: 0.8006 | Val Loss: 0.6902 | Val MAE: 0.6891 | Test MAE: 0.7378 | Time: 25.8247
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [7] Train Loss: 0.7248 | Train MAE: 0.7236 | Val Loss: 0.7816 | Val MAE: 0.7805 | Test MAE: 0.8229 | Time: 25.6768
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [8] Train Loss: 0.6977 | Train MAE: 0.6965 | Val Loss: 0.5916 | Val MAE: 0.5904 | Test MAE: 0.6281 | Time: 25.9810
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [9] Train Loss: 0.6761 | Train MAE: 0.6749 | Val Loss: 0.5857 | Val MAE: 0.5846 | Test MAE: 0.6352 | Time: 26.5127
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [10] Train Loss: 0.6368 | Train MAE: 0.6356 | Val Loss: 0.5802 | Val MAE: 0.5791 | Test MAE: 0.6357 | Time: 25.6758
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [11] Train Loss: 0.6117 | Train MAE: 0.6105 | Val Loss: 0.6241 | Val MAE: 0.6230 | Test MAE: 0.6785 | Time: 26.1736
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [12] Train Loss: 0.5942 | Train MAE: 0.5930 | Val Loss: 0.7335 | Val MAE: 0.7323 | Test MAE: 0.7702 | Time: 25.6765
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [13] Train Loss: 0.6057 | Train MAE: 0.6045 | Val Loss: 0.5481 | Val MAE: 0.5470 | Test MAE: 0.6235 | Time: 26.2408
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [14] Train Loss: 0.6168 | Train MAE: 0.6156 | Val Loss: 0.6930 | Val MAE: 0.6918 | Test MAE: 0.7172 | Time: 26.4910
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [15] Train Loss: 0.5826 | Train MAE: 0.5814 | Val Loss: 0.5242 | Val MAE: 0.5231 | Test MAE: 0.5524 | Time: 25.4324
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [16] Train Loss: 0.5674 | Train MAE: 0.5662 | Val Loss: 0.5630 | Val MAE: 0.5619 | Test MAE: 0.6099 | Time: 26.2980
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [17] Train Loss: 0.5680 | Train MAE: 0.5668 | Val Loss: 0.5186 | Val MAE: 0.5175 | Test MAE: 0.5657 | Time: 25.7718
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [18] Train Loss: 0.5490 | Train MAE: 0.5478 | Val Loss: 0.5657 | Val MAE: 0.5645 | Test MAE: 0.6192 | Time: 26.2914
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [19] Train Loss: 0.5342 | Train MAE: 0.5330 | Val Loss: 0.6073 | Val MAE: 0.6062 | Test MAE: 0.6523 | Time: 26.4077
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [20] Train Loss: 0.5728 | Train MAE: 0.5716 | Val Loss: 0.5723 | Val MAE: 0.5712 | Test MAE: 0.6268 | Time: 26.0761
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [21] Train Loss: 0.5203 | Train MAE: 0.5191 | Val Loss: 0.4974 | Val MAE: 0.4962 | Test MAE: 0.5342 | Time: 25.9084
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [22] Train Loss: 0.5361 | Train MAE: 0.5349 | Val Loss: 0.5752 | Val MAE: 0.5740 | Test MAE: 0.6100 | Time: 25.2746
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [23] Train Loss: 0.5584 | Train MAE: 0.5572 | Val Loss: 0.5339 | Val MAE: 0.5328 | Test MAE: 0.5717 | Time: 25.7691
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [24] Train Loss: 0.5260 | Train MAE: 0.5248 | Val Loss: 0.5056 | Val MAE: 0.5044 | Test MAE: 0.5616 | Time: 26.4047
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [25] Train Loss: 0.5044 | Train MAE: 0.5032 | Val Loss: 0.4798 | Val MAE: 0.4786 | Test MAE: 0.5163 | Time: 25.2566
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [26] Train Loss: 0.5118 | Train MAE: 0.5106 | Val Loss: 0.4772 | Val MAE: 0.4761 | Test MAE: 0.5006 | Time: 25.8722
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [27] Train Loss: 0.5135 | Train MAE: 0.5123 | Val Loss: 0.5438 | Val MAE: 0.5426 | Test MAE: 0.5774 | Time: 25.8673
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [28] Train Loss: 0.4786 | Train MAE: 0.4774 | Val Loss: 0.4811 | Val MAE: 0.4800 | Test MAE: 0.5245 | Time: 26.3472
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [29] Train Loss: 0.4766 | Train MAE: 0.4754 | Val Loss: 0.4641 | Val MAE: 0.4630 | Test MAE: 0.4921 | Time: 25.8114
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [30] Train Loss: 0.4646 | Train MAE: 0.4634 | Val Loss: 0.4724 | Val MAE: 0.4713 | Test MAE: 0.5045 | Time: 25.4116
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [31] Train Loss: 0.4821 | Train MAE: 0.4810 | Val Loss: 0.5150 | Val MAE: 0.5139 | Test MAE: 0.5225 | Time: 26.2527
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [32] Train Loss: 0.4719 | Train MAE: 0.4707 | Val Loss: 0.5215 | Val MAE: 0.5204 | Test MAE: 0.5450 | Time: 26.4210
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [33] Train Loss: 0.4847 | Train MAE: 0.4835 | Val Loss: 0.4701 | Val MAE: 0.4690 | Test MAE: 0.5114 | Time: 25.3896
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [34] Train Loss: 0.4685 | Train MAE: 0.4674 | Val Loss: 0.5026 | Val MAE: 0.5014 | Test MAE: 0.5230 | Time: 25.7272
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [35] Train Loss: 0.4715 | Train MAE: 0.4703 | Val Loss: 0.4553 | Val MAE: 0.4541 | Test MAE: 0.4890 | Time: 26.0331
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [36] Train Loss: 0.5920 | Train MAE: 0.5908 | Val Loss: 0.4878 | Val MAE: 0.4867 | Test MAE: 0.5134 | Time: 26.2884
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [37] Train Loss: 0.4775 | Train MAE: 0.4763 | Val Loss: 0.4902 | Val MAE: 0.4891 | Test MAE: 0.5123 | Time: 25.3217
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [38] Train Loss: 0.4483 | Train MAE: 0.4471 | Val Loss: 0.4469 | Val MAE: 0.4458 | Test MAE: 0.4701 | Time: 25.9808
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [39] Train Loss: 0.4837 | Train MAE: 0.4825 | Val Loss: 0.5823 | Val MAE: 0.5812 | Test MAE: 0.5946 | Time: 25.7748
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [40] Train Loss: 0.4472 | Train MAE: 0.4460 | Val Loss: 0.4434 | Val MAE: 0.4423 | Test MAE: 0.4741 | Time: 25.4942
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [41] Train Loss: 0.4188 | Train MAE: 0.4176 | Val Loss: 0.4916 | Val MAE: 0.4905 | Test MAE: 0.5380 | Time: 25.8317
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [42] Train Loss: 0.4395 | Train MAE: 0.4383 | Val Loss: 0.4615 | Val MAE: 0.4603 | Test MAE: 0.4925 | Time: 26.2776
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [43] Train Loss: 0.4441 | Train MAE: 0.4429 | Val Loss: 0.5122 | Val MAE: 0.5110 | Test MAE: 0.5250 | Time: 25.5276
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [44] Train Loss: 0.4354 | Train MAE: 0.4342 | Val Loss: 0.4211 | Val MAE: 0.4200 | Test MAE: 0.4552 | Time: 25.9000
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [45] Train Loss: 0.4183 | Train MAE: 0.4171 | Val Loss: 0.4411 | Val MAE: 0.4400 | Test MAE: 0.4679 | Time: 26.4835
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [46] Train Loss: 0.4356 | Train MAE: 0.4344 | Val Loss: 0.4708 | Val MAE: 0.4697 | Test MAE: 0.5031 | Time: 25.4439
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [47] Train Loss: 0.4156 | Train MAE: 0.4144 | Val Loss: 0.5177 | Val MAE: 0.5166 | Test MAE: 0.5491 | Time: 25.8497
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [48] Train Loss: 0.4153 | Train MAE: 0.4141 | Val Loss: 0.4855 | Val MAE: 0.4844 | Test MAE: 0.5095 | Time: 26.8969
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [49] Train Loss: 0.4246 | Train MAE: 0.4234 | Val Loss: 0.4905 | Val MAE: 0.4893 | Test MAE: 0.5204 | Time: 26.7007
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [50] Train Loss: 0.3938 | Train MAE: 0.3926 | Val Loss: 0.4501 | Val MAE: 0.4490 | Test MAE: 0.4794 | Time: 26.2321
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [51] Train Loss: 0.4091 | Train MAE: 0.4079 | Val Loss: 0.4818 | Val MAE: 0.4807 | Test MAE: 0.4985 | Time: 25.6513
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [52] Train Loss: 0.3982 | Train MAE: 0.3970 | Val Loss: 0.4698 | Val MAE: 0.4687 | Test MAE: 0.4976 | Time: 25.9506
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [53] Train Loss: 0.3941 | Train MAE: 0.3929 | Val Loss: 0.4393 | Val MAE: 0.4381 | Test MAE: 0.4691 | Time: 25.7956
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [54] Train Loss: 0.3809 | Train MAE: 0.3797 | Val Loss: 0.4794 | Val MAE: 0.4783 | Test MAE: 0.5077 | Time: 26.1513
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [55] Train Loss: 0.4120 | Train MAE: 0.4108 | Val Loss: 0.4657 | Val MAE: 0.4645 | Test MAE: 0.5016 | Time: 26.7505
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [56] Train Loss: 0.4058 | Train MAE: 0.4046 | Val Loss: 0.4854 | Val MAE: 0.4843 | Test MAE: 0.5258 | Time: 25.1188
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [57] Train Loss: 0.3911 | Train MAE: 0.3899 | Val Loss: 0.4820 | Val MAE: 0.4809 | Test MAE: 0.4974 | Time: 25.9820
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [58] Train Loss: 0.3903 | Train MAE: 0.3891 | Val Loss: 0.4655 | Val MAE: 0.4643 | Test MAE: 0.4854 | Time: 25.9221
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [59] Train Loss: 0.3761 | Train MAE: 0.3749 | Val Loss: 0.4973 | Val MAE: 0.4962 | Test MAE: 0.5181 | Time: 26.0285
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [60] Train Loss: 0.3691 | Train MAE: 0.3679 | Val Loss: 0.4208 | Val MAE: 0.4197 | Test MAE: 0.4531 | Time: 26.4412
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [61] Train Loss: 0.4021 | Train MAE: 0.4009 | Val Loss: 0.5957 | Val MAE: 0.5946 | Test MAE: 0.6330 | Time: 26.3031
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [62] Train Loss: 0.3893 | Train MAE: 0.3881 | Val Loss: 0.4726 | Val MAE: 0.4715 | Test MAE: 0.4814 | Time: 25.3213
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [63] Train Loss: 0.3773 | Train MAE: 0.3761 | Val Loss: 0.4480 | Val MAE: 0.4468 | Test MAE: 0.4698 | Time: 25.8909
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [64] Train Loss: 0.3905 | Train MAE: 0.3893 | Val Loss: 0.5045 | Val MAE: 0.5034 | Test MAE: 0.5338 | Time: 25.6868
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [65] Train Loss: 0.3656 | Train MAE: 0.3644 | Val Loss: 0.4729 | Val MAE: 0.4717 | Test MAE: 0.4833 | Time: 26.3995
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [66] Train Loss: 0.3711 | Train MAE: 0.3699 | Val Loss: 0.4602 | Val MAE: 0.4590 | Test MAE: 0.4701 | Time: 26.3610
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [67] Train Loss: 0.3709 | Train MAE: 0.3697 | Val Loss: 0.4215 | Val MAE: 0.4203 | Test MAE: 0.4347 | Time: 26.4057
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [68] Train Loss: 0.3609 | Train MAE: 0.3597 | Val Loss: 0.4184 | Val MAE: 0.4172 | Test MAE: 0.4304 | Time: 25.5892
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [69] Train Loss: 0.3364 | Train MAE: 0.3352 | Val Loss: 0.4249 | Val MAE: 0.4237 | Test MAE: 0.4463 | Time: 26.2638
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [70] Train Loss: 0.3311 | Train MAE: 0.3299 | Val Loss: 0.4200 | Val MAE: 0.4189 | Test MAE: 0.4332 | Time: 26.3275
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [71] Train Loss: 0.3568 | Train MAE: 0.3556 | Val Loss: 0.4178 | Val MAE: 0.4167 | Test MAE: 0.4289 | Time: 25.1435
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [72] Train Loss: 0.3566 | Train MAE: 0.3553 | Val Loss: 0.4092 | Val MAE: 0.4081 | Test MAE: 0.4147 | Time: 26.3608
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [73] Train Loss: 0.3441 | Train MAE: 0.3429 | Val Loss: 0.4042 | Val MAE: 0.4031 | Test MAE: 0.4178 | Time: 25.3543
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [74] Train Loss: 0.3451 | Train MAE: 0.3439 | Val Loss: 0.4372 | Val MAE: 0.4361 | Test MAE: 0.4435 | Time: 25.6536
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [75] Train Loss: 0.3314 | Train MAE: 0.3302 | Val Loss: 0.4383 | Val MAE: 0.4372 | Test MAE: 0.4451 | Time: 26.3366
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [76] Train Loss: 0.3266 | Train MAE: 0.3254 | Val Loss: 0.4117 | Val MAE: 0.4106 | Test MAE: 0.4343 | Time: 26.3543
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [77] Train Loss: 0.3209 | Train MAE: 0.3197 | Val Loss: 0.4290 | Val MAE: 0.4278 | Test MAE: 0.4534 | Time: 25.4053
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [78] Train Loss: 0.3268 | Train MAE: 0.3256 | Val Loss: 0.4124 | Val MAE: 0.4113 | Test MAE: 0.4255 | Time: 26.4057
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [79] Train Loss: 0.3405 | Train MAE: 0.3393 | Val Loss: 0.4698 | Val MAE: 0.4686 | Test MAE: 0.5103 | Time: 26.2753
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [80] Train Loss: 0.3516 | Train MAE: 0.3504 | Val Loss: 0.4650 | Val MAE: 0.4639 | Test MAE: 0.4824 | Time: 26.3068
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [81] Train Loss: 0.3310 | Train MAE: 0.3298 | Val Loss: 0.4117 | Val MAE: 0.4106 | Test MAE: 0.4195 | Time: 25.6650
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [82] Train Loss: 0.3488 | Train MAE: 0.3476 | Val Loss: 0.4180 | Val MAE: 0.4168 | Test MAE: 0.4350 | Time: 26.3594
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [83] Train Loss: 0.3137 | Train MAE: 0.3125 | Val Loss: 0.4294 | Val MAE: 0.4282 | Test MAE: 0.4416 | Time: 26.2724
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [84] Train Loss: 0.3016 | Train MAE: 0.3004 | Val Loss: 0.3924 | Val MAE: 0.3913 | Test MAE: 0.4107 | Time: 25.5683
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [85] Train Loss: 0.3187 | Train MAE: 0.3175 | Val Loss: 0.4196 | Val MAE: 0.4184 | Test MAE: 0.4570 | Time: 26.2311
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [86] Train Loss: 0.3175 | Train MAE: 0.3163 | Val Loss: 0.4642 | Val MAE: 0.4630 | Test MAE: 0.4855 | Time: 26.2844
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [87] Train Loss: 0.3317 | Train MAE: 0.3305 | Val Loss: 0.4253 | Val MAE: 0.4242 | Test MAE: 0.4408 | Time: 25.1495
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [88] Train Loss: 0.3431 | Train MAE: 0.3419 | Val Loss: 0.4177 | Val MAE: 0.4166 | Test MAE: 0.4436 | Time: 26.0076
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [89] Train Loss: 0.3126 | Train MAE: 0.3114 | Val Loss: 0.4278 | Val MAE: 0.4266 | Test MAE: 0.4650 | Time: 25.8831
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [90] Train Loss: 0.3301 | Train MAE: 0.3289 | Val Loss: 0.4415 | Val MAE: 0.4404 | Test MAE: 0.4515 | Time: 26.3497
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [91] Train Loss: 0.3231 | Train MAE: 0.3219 | Val Loss: 0.4358 | Val MAE: 0.4347 | Test MAE: 0.4473 | Time: 25.4187
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [92] Train Loss: 0.3579 | Train MAE: 0.3567 | Val Loss: 0.4767 | Val MAE: 0.4756 | Test MAE: 0.4930 | Time: 25.8187
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [93] Train Loss: 0.3131 | Train MAE: 0.3118 | Val Loss: 0.4081 | Val MAE: 0.4070 | Test MAE: 0.4249 | Time: 25.9642
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [94] Train Loss: 0.3086 | Train MAE: 0.3074 | Val Loss: 0.3980 | Val MAE: 0.3968 | Test MAE: 0.4219 | Time: 26.7662
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [95] Train Loss: 0.3163 | Train MAE: 0.3151 | Val Loss: 0.4422 | Val MAE: 0.4410 | Test MAE: 0.4549 | Time: 25.3841
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [96] Train Loss: 0.3092 | Train MAE: 0.3080 | Val Loss: 0.3996 | Val MAE: 0.3985 | Test MAE: 0.4287 | Time: 25.9072
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [97] Train Loss: 0.3200 | Train MAE: 0.3188 | Val Loss: 0.4148 | Val MAE: 0.4137 | Test MAE: 0.4463 | Time: 25.2521
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [98] Train Loss: 0.3062 | Train MAE: 0.3050 | Val Loss: 0.3891 | Val MAE: 0.3880 | Test MAE: 0.4174 | Time: 25.7181
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [99] Train Loss: 0.3032 | Train MAE: 0.3020 | Val Loss: 0.3990 | Val MAE: 0.3979 | Test MAE: 0.4217 | Time: 26.4689
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [100] Train Loss: 0.2914 | Train MAE: 0.2902 | Val Loss: 0.4247 | Val MAE: 0.4236 | Test MAE: 0.4375 | Time: 25.3350
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [101] Train Loss: 0.3037 | Train MAE: 0.3025 | Val Loss: 0.3953 | Val MAE: 0.3942 | Test MAE: 0.4090 | Time: 26.0280
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [102] Train Loss: 0.3080 | Train MAE: 0.3068 | Val Loss: 0.3962 | Val MAE: 0.3951 | Test MAE: 0.4158 | Time: 26.4665
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [103] Train Loss: 0.2885 | Train MAE: 0.2873 | Val Loss: 0.4257 | Val MAE: 0.4245 | Test MAE: 0.4462 | Time: 25.2905
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [104] Train Loss: 0.3041 | Train MAE: 0.3029 | Val Loss: 0.4267 | Val MAE: 0.4255 | Test MAE: 0.4429 | Time: 25.6706
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [105] Train Loss: 0.2831 | Train MAE: 0.2819 | Val Loss: 0.3818 | Val MAE: 0.3807 | Test MAE: 0.4052 | Time: 26.4290
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [106] Train Loss: 0.3232 | Train MAE: 0.3220 | Val Loss: 0.4303 | Val MAE: 0.4292 | Test MAE: 0.4522 | Time: 26.2634
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [107] Train Loss: 0.2970 | Train MAE: 0.2958 | Val Loss: 0.4424 | Val MAE: 0.4413 | Test MAE: 0.4473 | Time: 26.2808
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [108] Train Loss: 0.3086 | Train MAE: 0.3074 | Val Loss: 0.4186 | Val MAE: 0.4175 | Test MAE: 0.4292 | Time: 25.1063
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [109] Train Loss: 0.3252 | Train MAE: 0.3240 | Val Loss: 0.4279 | Val MAE: 0.4268 | Test MAE: 0.4476 | Time: 25.8818
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [110] Train Loss: 0.3126 | Train MAE: 0.3114 | Val Loss: 0.4043 | Val MAE: 0.4032 | Test MAE: 0.4125 | Time: 26.1915
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [111] Train Loss: 0.3042 | Train MAE: 0.3030 | Val Loss: 0.4207 | Val MAE: 0.4195 | Test MAE: 0.4190 | Time: 26.4381
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [112] Train Loss: 0.2964 | Train MAE: 0.2952 | Val Loss: 0.4182 | Val MAE: 0.4171 | Test MAE: 0.4300 | Time: 25.1646
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [113] Train Loss: 0.2958 | Train MAE: 0.2946 | Val Loss: 0.3967 | Val MAE: 0.3955 | Test MAE: 0.4175 | Time: 25.8777
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [114] Train Loss: 0.2799 | Train MAE: 0.2787 | Val Loss: 0.4285 | Val MAE: 0.4274 | Test MAE: 0.4481 | Time: 26.4003
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [115] Train Loss: 0.2846 | Train MAE: 0.2834 | Val Loss: 0.4102 | Val MAE: 0.4090 | Test MAE: 0.4160 | Time: 26.5347
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [116] Train Loss: 0.3759 | Train MAE: 0.3747 | Val Loss: 0.5748 | Val MAE: 0.5737 | Test MAE: 0.5654 | Time: 25.9382
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [117] Train Loss: 0.3191 | Train MAE: 0.3179 | Val Loss: 0.3931 | Val MAE: 0.3919 | Test MAE: 0.4021 | Time: 25.5092
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [118] Train Loss: 0.2976 | Train MAE: 0.2964 | Val Loss: 0.3862 | Val MAE: 0.3851 | Test MAE: 0.3998 | Time: 26.3789
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [119] Train Loss: 0.2694 | Train MAE: 0.2681 | Val Loss: 0.3753 | Val MAE: 0.3741 | Test MAE: 0.3935 | Time: 25.6901
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [120] Train Loss: 0.2798 | Train MAE: 0.2786 | Val Loss: 0.3893 | Val MAE: 0.3882 | Test MAE: 0.4062 | Time: 26.6171
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [121] Train Loss: 0.2929 | Train MAE: 0.2917 | Val Loss: 0.3982 | Val MAE: 0.3970 | Test MAE: 0.4049 | Time: 25.4414
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [122] Train Loss: 0.2719 | Train MAE: 0.2707 | Val Loss: 0.4061 | Val MAE: 0.4050 | Test MAE: 0.4112 | Time: 26.4319
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [123] Train Loss: 0.2642 | Train MAE: 0.2630 | Val Loss: 0.3994 | Val MAE: 0.3982 | Test MAE: 0.4066 | Time: 25.9404
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [124] Train Loss: 0.2940 | Train MAE: 0.2928 | Val Loss: 0.3934 | Val MAE: 0.3923 | Test MAE: 0.4071 | Time: 25.8949
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [125] Train Loss: 0.2652 | Train MAE: 0.2640 | Val Loss: 0.4083 | Val MAE: 0.4072 | Test MAE: 0.4286 | Time: 26.2968
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [126] Train Loss: 0.2761 | Train MAE: 0.2749 | Val Loss: 0.4172 | Val MAE: 0.4161 | Test MAE: 0.4347 | Time: 25.9914
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [127] Train Loss: 0.2672 | Train MAE: 0.2660 | Val Loss: 0.4258 | Val MAE: 0.4247 | Test MAE: 0.4233 | Time: 26.1093
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [128] Train Loss: 0.2935 | Train MAE: 0.2922 | Val Loss: 0.3844 | Val MAE: 0.3833 | Test MAE: 0.4097 | Time: 26.6706
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [129] Train Loss: 0.2996 | Train MAE: 0.2984 | Val Loss: 0.4307 | Val MAE: 0.4295 | Test MAE: 0.4411 | Time: 25.4894
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [130] Train Loss: 0.2714 | Train MAE: 0.2702 | Val Loss: 0.3695 | Val MAE: 0.3684 | Test MAE: 0.3946 | Time: 25.8911
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [131] Train Loss: 0.2629 | Train MAE: 0.2617 | Val Loss: 0.4491 | Val MAE: 0.4480 | Test MAE: 0.4442 | Time: 26.7912
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [132] Train Loss: 0.2932 | Train MAE: 0.2920 | Val Loss: 0.4278 | Val MAE: 0.4267 | Test MAE: 0.4436 | Time: 25.6526
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [133] Train Loss: 0.2921 | Train MAE: 0.2909 | Val Loss: 0.4180 | Val MAE: 0.4169 | Test MAE: 0.4393 | Time: 25.9222
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [134] Train Loss: 0.2698 | Train MAE: 0.2686 | Val Loss: 0.3892 | Val MAE: 0.3881 | Test MAE: 0.4146 | Time: 25.8955
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [135] Train Loss: 0.2618 | Train MAE: 0.2606 | Val Loss: 0.4278 | Val MAE: 0.4266 | Test MAE: 0.4328 | Time: 26.1293
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [136] Train Loss: 0.2672 | Train MAE: 0.2660 | Val Loss: 0.4750 | Val MAE: 0.4739 | Test MAE: 0.4900 | Time: 26.2393
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [137] Train Loss: 0.2731 | Train MAE: 0.2719 | Val Loss: 0.3725 | Val MAE: 0.3714 | Test MAE: 0.4000 | Time: 25.9695
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [138] Train Loss: 0.2837 | Train MAE: 0.2825 | Val Loss: 0.4305 | Val MAE: 0.4294 | Test MAE: 0.4678 | Time: 25.4297
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [139] Train Loss: 0.2916 | Train MAE: 0.2904 | Val Loss: 0.5214 | Val MAE: 0.5203 | Test MAE: 0.5048 | Time: 26.0420
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [140] Train Loss: 0.2773 | Train MAE: 0.2761 | Val Loss: 0.4092 | Val MAE: 0.4080 | Test MAE: 0.4193 | Time: 26.4758
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [141] Train Loss: 0.2692 | Train MAE: 0.2680 | Val Loss: 0.3873 | Val MAE: 0.3862 | Test MAE: 0.4069 | Time: 26.2781
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [142] Train Loss: 0.2748 | Train MAE: 0.2736 | Val Loss: 0.3975 | Val MAE: 0.3963 | Test MAE: 0.4108 | Time: 25.2108
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [143] Train Loss: 0.2621 | Train MAE: 0.2609 | Val Loss: 0.3947 | Val MAE: 0.3936 | Test MAE: 0.4129 | Time: 25.8210
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [144] Train Loss: 0.2419 | Train MAE: 0.2407 | Val Loss: 0.3744 | Val MAE: 0.3733 | Test MAE: 0.3968 | Time: 25.5972
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [145] Train Loss: 0.2510 | Train MAE: 0.2498 | Val Loss: 0.3908 | Val MAE: 0.3896 | Test MAE: 0.4239 | Time: 26.3786
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [146] Train Loss: 0.2421 | Train MAE: 0.2409 | Val Loss: 0.4615 | Val MAE: 0.4603 | Test MAE: 0.4778 | Time: 26.8236
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [147] Train Loss: 0.2911 | Train MAE: 0.2898 | Val Loss: 0.4485 | Val MAE: 0.4473 | Test MAE: 0.4684 | Time: 25.6263
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [148] Train Loss: 0.2832 | Train MAE: 0.2820 | Val Loss: 0.3857 | Val MAE: 0.3846 | Test MAE: 0.4010 | Time: 25.9735
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [149] Train Loss: 0.2683 | Train MAE: 0.2671 | Val Loss: 0.4190 | Val MAE: 0.4179 | Test MAE: 0.4347 | Time: 25.8582
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [150] Train Loss: 0.2735 | Train MAE: 0.2723 | Val Loss: 0.3771 | Val MAE: 0.3760 | Test MAE: 0.3921 | Time: 26.3792
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [151] Train Loss: 0.2477 | Train MAE: 0.2465 | Val Loss: 0.4140 | Val MAE: 0.4129 | Test MAE: 0.4406 | Time: 26.6327
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [152] Train Loss: 0.2866 | Train MAE: 0.2854 | Val Loss: 0.4432 | Val MAE: 0.4421 | Test MAE: 0.4574 | Time: 25.8187
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [153] Train Loss: 0.2720 | Train MAE: 0.2708 | Val Loss: 0.3744 | Val MAE: 0.3732 | Test MAE: 0.3972 | Time: 26.8064
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [154] Train Loss: 0.2595 | Train MAE: 0.2582 | Val Loss: 0.3765 | Val MAE: 0.3754 | Test MAE: 0.3891 | Time: 26.1519
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [155] Train Loss: 0.2452 | Train MAE: 0.2440 | Val Loss: 0.4447 | Val MAE: 0.4436 | Test MAE: 0.4520 | Time: 26.7340
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [156] Train Loss: 0.2543 | Train MAE: 0.2531 | Val Loss: 0.3745 | Val MAE: 0.3734 | Test MAE: 0.3995 | Time: 26.7118
Epoch 00157: reducing learning rate of group 0 to 5.0000e-04.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [157] Train Loss: 0.2094 | Train MAE: 0.2081 | Val Loss: 0.3728 | Val MAE: 0.3716 | Test MAE: 0.3928 | Time: 27.0754
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [158] Train Loss: 0.2081 | Train MAE: 0.2069 | Val Loss: 0.3787 | Val MAE: 0.3776 | Test MAE: 0.3851 | Time: 25.5525
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [159] Train Loss: 0.2075 | Train MAE: 0.2063 | Val Loss: 0.3695 | Val MAE: 0.3684 | Test MAE: 0.3933 | Time: 25.9757
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [160] Train Loss: 0.1968 | Train MAE: 0.1956 | Val Loss: 0.3816 | Val MAE: 0.3805 | Test MAE: 0.3862 | Time: 26.4974
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [161] Train Loss: 0.2013 | Train MAE: 0.2001 | Val Loss: 0.3634 | Val MAE: 0.3623 | Test MAE: 0.3761 | Time: 26.4199
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [162] Train Loss: 0.2068 | Train MAE: 0.2056 | Val Loss: 0.3646 | Val MAE: 0.3635 | Test MAE: 0.3760 | Time: 25.9524
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [163] Train Loss: 0.2032 | Train MAE: 0.2020 | Val Loss: 0.3707 | Val MAE: 0.3696 | Test MAE: 0.3752 | Time: 26.4068
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [164] Train Loss: 0.1936 | Train MAE: 0.1923 | Val Loss: 0.3718 | Val MAE: 0.3706 | Test MAE: 0.3833 | Time: 26.4067
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [165] Train Loss: 0.1902 | Train MAE: 0.1890 | Val Loss: 0.3865 | Val MAE: 0.3853 | Test MAE: 0.3935 | Time: 25.7331
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [166] Train Loss: 0.2042 | Train MAE: 0.2030 | Val Loss: 0.3712 | Val MAE: 0.3701 | Test MAE: 0.3913 | Time: 26.5446
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [167] Train Loss: 0.2006 | Train MAE: 0.1994 | Val Loss: 0.3594 | Val MAE: 0.3583 | Test MAE: 0.3764 | Time: 26.3629
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [168] Train Loss: 0.1890 | Train MAE: 0.1878 | Val Loss: 0.3696 | Val MAE: 0.3685 | Test MAE: 0.3823 | Time: 25.6958
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [169] Train Loss: 0.1919 | Train MAE: 0.1907 | Val Loss: 0.3772 | Val MAE: 0.3761 | Test MAE: 0.3978 | Time: 26.1205
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [170] Train Loss: 0.1995 | Train MAE: 0.1983 | Val Loss: 0.3739 | Val MAE: 0.3727 | Test MAE: 0.3943 | Time: 26.6209
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [171] Train Loss: 0.1925 | Train MAE: 0.1913 | Val Loss: 0.3735 | Val MAE: 0.3724 | Test MAE: 0.3885 | Time: 26.4681
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [172] Train Loss: 0.2031 | Train MAE: 0.2019 | Val Loss: 0.3651 | Val MAE: 0.3639 | Test MAE: 0.3972 | Time: 25.5067
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [173] Train Loss: 0.2026 | Train MAE: 0.2014 | Val Loss: 0.3762 | Val MAE: 0.3751 | Test MAE: 0.3980 | Time: 26.9271
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [174] Train Loss: 0.1879 | Train MAE: 0.1867 | Val Loss: 0.4019 | Val MAE: 0.4008 | Test MAE: 0.4247 | Time: 25.6055
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [175] Train Loss: 0.2013 | Train MAE: 0.2001 | Val Loss: 0.3736 | Val MAE: 0.3725 | Test MAE: 0.4039 | Time: 26.1600
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [176] Train Loss: 0.1939 | Train MAE: 0.1926 | Val Loss: 0.3624 | Val MAE: 0.3613 | Test MAE: 0.3856 | Time: 25.7364
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [177] Train Loss: 0.1910 | Train MAE: 0.1898 | Val Loss: 0.3695 | Val MAE: 0.3684 | Test MAE: 0.3989 | Time: 26.1420
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [178] Train Loss: 0.1982 | Train MAE: 0.1970 | Val Loss: 0.3760 | Val MAE: 0.3748 | Test MAE: 0.3918 | Time: 26.7845
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [179] Train Loss: 0.1810 | Train MAE: 0.1797 | Val Loss: 0.4113 | Val MAE: 0.4101 | Test MAE: 0.4324 | Time: 25.6003
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [180] Train Loss: 0.1910 | Train MAE: 0.1898 | Val Loss: 0.3732 | Val MAE: 0.3721 | Test MAE: 0.3986 | Time: 26.1211
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [181] Train Loss: 0.2097 | Train MAE: 0.2085 | Val Loss: 0.3609 | Val MAE: 0.3597 | Test MAE: 0.3886 | Time: 25.8012
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [182] Train Loss: 0.1806 | Train MAE: 0.1794 | Val Loss: 0.3621 | Val MAE: 0.3610 | Test MAE: 0.3852 | Time: 27.0517
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [183] Train Loss: 0.1895 | Train MAE: 0.1883 | Val Loss: 0.3697 | Val MAE: 0.3686 | Test MAE: 0.3893 | Time: 25.5389
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [184] Train Loss: 0.1814 | Train MAE: 0.1802 | Val Loss: 0.3632 | Val MAE: 0.3621 | Test MAE: 0.3823 | Time: 26.0389
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [185] Train Loss: 0.1931 | Train MAE: 0.1918 | Val Loss: 0.3689 | Val MAE: 0.3678 | Test MAE: 0.3926 | Time: 26.5722
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [186] Train Loss: 0.1787 | Train MAE: 0.1775 | Val Loss: 0.3668 | Val MAE: 0.3656 | Test MAE: 0.3882 | Time: 26.3658
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [187] Train Loss: 0.1861 | Train MAE: 0.1849 | Val Loss: 0.4060 | Val MAE: 0.4048 | Test MAE: 0.4182 | Time: 25.6639
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [188] Train Loss: 0.2117 | Train MAE: 0.2105 | Val Loss: 0.3781 | Val MAE: 0.3770 | Test MAE: 0.3937 | Time: 26.0700
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [189] Train Loss: 0.1953 | Train MAE: 0.1941 | Val Loss: 0.4240 | Val MAE: 0.4229 | Test MAE: 0.4454 | Time: 26.0383
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [190] Train Loss: 0.1908 | Train MAE: 0.1896 | Val Loss: 0.3576 | Val MAE: 0.3564 | Test MAE: 0.3717 | Time: 26.7566
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [191] Train Loss: 0.1947 | Train MAE: 0.1934 | Val Loss: 0.3905 | Val MAE: 0.3893 | Test MAE: 0.4033 | Time: 25.8244
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [192] Train Loss: 0.1808 | Train MAE: 0.1796 | Val Loss: 0.3913 | Val MAE: 0.3901 | Test MAE: 0.4019 | Time: 26.4101
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [193] Train Loss: 0.1797 | Train MAE: 0.1785 | Val Loss: 0.3635 | Val MAE: 0.3623 | Test MAE: 0.3769 | Time: 26.2029
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [194] Train Loss: 0.1735 | Train MAE: 0.1723 | Val Loss: 0.3650 | Val MAE: 0.3638 | Test MAE: 0.3792 | Time: 26.4399
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [195] Train Loss: 0.1654 | Train MAE: 0.1642 | Val Loss: 0.3650 | Val MAE: 0.3639 | Test MAE: 0.3732 | Time: 26.7188
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [196] Train Loss: 0.1817 | Train MAE: 0.1805 | Val Loss: 0.3601 | Val MAE: 0.3590 | Test MAE: 0.3785 | Time: 25.5925
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [197] Train Loss: 0.1759 | Train MAE: 0.1747 | Val Loss: 0.3744 | Val MAE: 0.3733 | Test MAE: 0.3868 | Time: 25.9993
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [198] Train Loss: 0.1957 | Train MAE: 0.1945 | Val Loss: 0.3972 | Val MAE: 0.3961 | Test MAE: 0.4224 | Time: 25.7550
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [199] Train Loss: 0.1940 | Train MAE: 0.1928 | Val Loss: 0.3784 | Val MAE: 0.3772 | Test MAE: 0.4048 | Time: 26.1752
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [200] Train Loss: 0.1826 | Train MAE: 0.1813 | Val Loss: 0.3561 | Val MAE: 0.3550 | Test MAE: 0.3778 | Time: 26.7530
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [201] Train Loss: 0.1830 | Train MAE: 0.1818 | Val Loss: 0.3654 | Val MAE: 0.3642 | Test MAE: 0.3795 | Time: 25.5780
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [202] Train Loss: 0.1789 | Train MAE: 0.1777 | Val Loss: 0.3603 | Val MAE: 0.3591 | Test MAE: 0.3831 | Time: 26.6058
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [203] Train Loss: 0.1849 | Train MAE: 0.1837 | Val Loss: 0.3664 | Val MAE: 0.3653 | Test MAE: 0.3923 | Time: 26.9586
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [204] Train Loss: 0.1848 | Train MAE: 0.1835 | Val Loss: 0.3602 | Val MAE: 0.3591 | Test MAE: 0.3857 | Time: 25.4294
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [205] Train Loss: 0.1800 | Train MAE: 0.1788 | Val Loss: 0.4009 | Val MAE: 0.3998 | Test MAE: 0.4045 | Time: 26.5978
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [206] Train Loss: 0.1774 | Train MAE: 0.1762 | Val Loss: 0.3679 | Val MAE: 0.3668 | Test MAE: 0.3793 | Time: 26.7778
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [207] Train Loss: 0.1798 | Train MAE: 0.1786 | Val Loss: 0.3765 | Val MAE: 0.3753 | Test MAE: 0.3932 | Time: 26.1148
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [208] Train Loss: 0.1786 | Train MAE: 0.1774 | Val Loss: 0.3598 | Val MAE: 0.3586 | Test MAE: 0.3758 | Time: 27.1072
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [209] Train Loss: 0.1730 | Train MAE: 0.1718 | Val Loss: 0.3713 | Val MAE: 0.3702 | Test MAE: 0.3752 | Time: 25.4436
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [210] Train Loss: 0.1812 | Train MAE: 0.1800 | Val Loss: 0.3644 | Val MAE: 0.3633 | Test MAE: 0.3820 | Time: 25.9678
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [211] Train Loss: 0.1870 | Train MAE: 0.1858 | Val Loss: 0.3736 | Val MAE: 0.3725 | Test MAE: 0.3819 | Time: 26.5978
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [212] Train Loss: 0.1789 | Train MAE: 0.1776 | Val Loss: 0.3656 | Val MAE: 0.3645 | Test MAE: 0.3734 | Time: 26.8896
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [213] Train Loss: 0.1886 | Train MAE: 0.1874 | Val Loss: 0.3522 | Val MAE: 0.3511 | Test MAE: 0.3730 | Time: 25.8196
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [214] Train Loss: 0.1777 | Train MAE: 0.1765 | Val Loss: 0.3746 | Val MAE: 0.3734 | Test MAE: 0.3989 | Time: 25.5828
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [215] Train Loss: 0.1797 | Train MAE: 0.1785 | Val Loss: 0.3679 | Val MAE: 0.3667 | Test MAE: 0.3872 | Time: 26.0865
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [216] Train Loss: 0.1747 | Train MAE: 0.1735 | Val Loss: 0.3743 | Val MAE: 0.3731 | Test MAE: 0.3952 | Time: 25.7322
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [217] Train Loss: 0.1878 | Train MAE: 0.1866 | Val Loss: 0.3574 | Val MAE: 0.3563 | Test MAE: 0.3815 | Time: 26.4253
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [218] Train Loss: 0.1881 | Train MAE: 0.1869 | Val Loss: 0.3741 | Val MAE: 0.3729 | Test MAE: 0.4053 | Time: 26.2314
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [219] Train Loss: 0.1866 | Train MAE: 0.1854 | Val Loss: 0.3617 | Val MAE: 0.3605 | Test MAE: 0.3786 | Time: 26.7483
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [220] Train Loss: 0.1770 | Train MAE: 0.1758 | Val Loss: 0.3692 | Val MAE: 0.3681 | Test MAE: 0.3848 | Time: 26.4365
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [221] Train Loss: 0.1786 | Train MAE: 0.1774 | Val Loss: 0.3700 | Val MAE: 0.3689 | Test MAE: 0.3988 | Time: 25.5000
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [222] Train Loss: 0.1849 | Train MAE: 0.1837 | Val Loss: 0.3615 | Val MAE: 0.3604 | Test MAE: 0.3742 | Time: 26.3481
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [223] Train Loss: 0.1732 | Train MAE: 0.1720 | Val Loss: 0.3539 | Val MAE: 0.3527 | Test MAE: 0.3761 | Time: 25.8303
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [224] Train Loss: 0.1708 | Train MAE: 0.1696 | Val Loss: 0.3665 | Val MAE: 0.3654 | Test MAE: 0.3910 | Time: 26.6823
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [225] Train Loss: 0.1794 | Train MAE: 0.1782 | Val Loss: 0.3654 | Val MAE: 0.3643 | Test MAE: 0.3889 | Time: 25.5408
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [226] Train Loss: 0.1706 | Train MAE: 0.1694 | Val Loss: 0.3821 | Val MAE: 0.3809 | Test MAE: 0.3935 | Time: 25.7243
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [227] Train Loss: 0.1769 | Train MAE: 0.1757 | Val Loss: 0.3559 | Val MAE: 0.3547 | Test MAE: 0.3876 | Time: 25.7435
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [228] Train Loss: 0.1776 | Train MAE: 0.1764 | Val Loss: 0.3495 | Val MAE: 0.3484 | Test MAE: 0.3775 | Time: 26.8305
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [229] Train Loss: 0.1663 | Train MAE: 0.1651 | Val Loss: 0.3661 | Val MAE: 0.3650 | Test MAE: 0.3992 | Time: 26.5190
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [230] Train Loss: 0.1749 | Train MAE: 0.1737 | Val Loss: 0.3607 | Val MAE: 0.3596 | Test MAE: 0.3833 | Time: 25.7625
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [231] Train Loss: 0.1803 | Train MAE: 0.1791 | Val Loss: 0.3724 | Val MAE: 0.3713 | Test MAE: 0.4002 | Time: 26.1035
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [232] Train Loss: 0.1831 | Train MAE: 0.1818 | Val Loss: 0.3558 | Val MAE: 0.3547 | Test MAE: 0.3787 | Time: 26.6039
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [233] Train Loss: 0.1692 | Train MAE: 0.1680 | Val Loss: 0.3528 | Val MAE: 0.3517 | Test MAE: 0.3912 | Time: 25.6597
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [234] Train Loss: 0.1671 | Train MAE: 0.1659 | Val Loss: 0.3711 | Val MAE: 0.3700 | Test MAE: 0.3833 | Time: 26.0457
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [235] Train Loss: 0.1884 | Train MAE: 0.1872 | Val Loss: 0.3740 | Val MAE: 0.3729 | Test MAE: 0.4046 | Time: 27.1876
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [236] Train Loss: 0.1724 | Train MAE: 0.1712 | Val Loss: 0.3640 | Val MAE: 0.3629 | Test MAE: 0.3990 | Time: 26.7961
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [237] Train Loss: 0.1964 | Train MAE: 0.1952 | Val Loss: 0.3776 | Val MAE: 0.3764 | Test MAE: 0.3972 | Time: 25.6787
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [238] Train Loss: 0.1759 | Train MAE: 0.1747 | Val Loss: 0.3549 | Val MAE: 0.3538 | Test MAE: 0.3885 | Time: 26.2811
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [239] Train Loss: 0.1749 | Train MAE: 0.1737 | Val Loss: 0.3957 | Val MAE: 0.3946 | Test MAE: 0.4309 | Time: 26.3641
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [240] Train Loss: 0.1714 | Train MAE: 0.1702 | Val Loss: 0.3693 | Val MAE: 0.3682 | Test MAE: 0.3919 | Time: 25.2577
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [241] Train Loss: 0.1741 | Train MAE: 0.1728 | Val Loss: 0.3579 | Val MAE: 0.3567 | Test MAE: 0.3820 | Time: 26.0257
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [242] Train Loss: 0.1787 | Train MAE: 0.1775 | Val Loss: 0.3886 | Val MAE: 0.3875 | Test MAE: 0.4027 | Time: 26.0794
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [243] Train Loss: 0.1800 | Train MAE: 0.1788 | Val Loss: 0.3609 | Val MAE: 0.3598 | Test MAE: 0.3919 | Time: 26.3675
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [244] Train Loss: 0.1808 | Train MAE: 0.1796 | Val Loss: 0.3599 | Val MAE: 0.3588 | Test MAE: 0.3859 | Time: 25.5520
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [245] Train Loss: 0.1666 | Train MAE: 0.1654 | Val Loss: 0.3866 | Val MAE: 0.3855 | Test MAE: 0.4148 | Time: 26.0843
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [246] Train Loss: 0.1601 | Train MAE: 0.1589 | Val Loss: 0.3726 | Val MAE: 0.3715 | Test MAE: 0.3841 | Time: 26.2703
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [247] Train Loss: 0.1716 | Train MAE: 0.1704 | Val Loss: 0.3648 | Val MAE: 0.3637 | Test MAE: 0.3820 | Time: 25.3018
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [248] Train Loss: 0.1852 | Train MAE: 0.1840 | Val Loss: 0.3798 | Val MAE: 0.3787 | Test MAE: 0.3979 | Time: 25.8850
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [249] Train Loss: 0.1710 | Train MAE: 0.1698 | Val Loss: 0.3616 | Val MAE: 0.3604 | Test MAE: 0.3912 | Time: 26.3200
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [250] Train Loss: 0.1698 | Train MAE: 0.1685 | Val Loss: 0.3561 | Val MAE: 0.3549 | Test MAE: 0.3788 | Time: 26.6907
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [251] Train Loss: 0.1628 | Train MAE: 0.1616 | Val Loss: 0.3598 | Val MAE: 0.3586 | Test MAE: 0.3814 | Time: 26.2916
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [252] Train Loss: 0.1684 | Train MAE: 0.1672 | Val Loss: 0.3537 | Val MAE: 0.3526 | Test MAE: 0.3804 | Time: 26.5183
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [253] Train Loss: 0.1676 | Train MAE: 0.1664 | Val Loss: 0.3682 | Val MAE: 0.3671 | Test MAE: 0.3893 | Time: 25.5837
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [254] Train Loss: 0.1656 | Train MAE: 0.1644 | Val Loss: 0.3539 | Val MAE: 0.3527 | Test MAE: 0.3833 | Time: 26.4530
Epoch 00255: reducing learning rate of group 0 to 2.5000e-04.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [255] Train Loss: 0.1501 | Train MAE: 0.1489 | Val Loss: 0.3503 | Val MAE: 0.3492 | Test MAE: 0.3768 | Time: 26.7297
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [256] Train Loss: 0.1496 | Train MAE: 0.1484 | Val Loss: 0.3511 | Val MAE: 0.3499 | Test MAE: 0.3762 | Time: 26.1943
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [257] Train Loss: 0.1482 | Train MAE: 0.1470 | Val Loss: 0.3561 | Val MAE: 0.3550 | Test MAE: 0.3797 | Time: 25.4926
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [258] Train Loss: 0.1386 | Train MAE: 0.1374 | Val Loss: 0.3557 | Val MAE: 0.3545 | Test MAE: 0.3814 | Time: 26.4697
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [259] Train Loss: 0.1425 | Train MAE: 0.1413 | Val Loss: 0.3523 | Val MAE: 0.3511 | Test MAE: 0.3778 | Time: 26.3792
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [260] Train Loss: 0.1416 | Train MAE: 0.1404 | Val Loss: 0.3479 | Val MAE: 0.3467 | Test MAE: 0.3723 | Time: 26.3699
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [261] Train Loss: 0.1448 | Train MAE: 0.1436 | Val Loss: 0.3615 | Val MAE: 0.3604 | Test MAE: 0.3899 | Time: 26.6439
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [262] Train Loss: 0.1375 | Train MAE: 0.1363 | Val Loss: 0.3532 | Val MAE: 0.3521 | Test MAE: 0.3843 | Time: 26.0079
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [263] Train Loss: 0.1430 | Train MAE: 0.1418 | Val Loss: 0.3619 | Val MAE: 0.3608 | Test MAE: 0.3758 | Time: 26.1581
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [264] Train Loss: 0.1477 | Train MAE: 0.1464 | Val Loss: 0.3491 | Val MAE: 0.3480 | Test MAE: 0.3786 | Time: 26.2127
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [265] Train Loss: 0.1463 | Train MAE: 0.1451 | Val Loss: 0.3550 | Val MAE: 0.3539 | Test MAE: 0.3824 | Time: 25.7901
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [266] Train Loss: 0.1489 | Train MAE: 0.1477 | Val Loss: 0.3568 | Val MAE: 0.3557 | Test MAE: 0.3752 | Time: 26.2865
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [267] Train Loss: 0.1312 | Train MAE: 0.1300 | Val Loss: 0.3525 | Val MAE: 0.3513 | Test MAE: 0.3838 | Time: 26.0519
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [268] Train Loss: 0.1492 | Train MAE: 0.1480 | Val Loss: 0.3476 | Val MAE: 0.3465 | Test MAE: 0.3734 | Time: 25.9164
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [269] Train Loss: 0.1392 | Train MAE: 0.1380 | Val Loss: 0.3480 | Val MAE: 0.3469 | Test MAE: 0.3815 | Time: 26.1738
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [270] Train Loss: 0.1445 | Train MAE: 0.1433 | Val Loss: 0.3521 | Val MAE: 0.3509 | Test MAE: 0.3776 | Time: 25.8678
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [271] Train Loss: 0.1472 | Train MAE: 0.1460 | Val Loss: 0.3506 | Val MAE: 0.3494 | Test MAE: 0.3839 | Time: 26.8308
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [272] Train Loss: 0.1449 | Train MAE: 0.1437 | Val Loss: 0.3499 | Val MAE: 0.3488 | Test MAE: 0.3799 | Time: 25.5314
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [273] Train Loss: 0.1450 | Train MAE: 0.1438 | Val Loss: 0.3466 | Val MAE: 0.3454 | Test MAE: 0.3754 | Time: 25.8588
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [274] Train Loss: 0.1501 | Train MAE: 0.1489 | Val Loss: 0.3548 | Val MAE: 0.3536 | Test MAE: 0.3821 | Time: 26.5478
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [275] Train Loss: 0.1442 | Train MAE: 0.1430 | Val Loss: 0.3489 | Val MAE: 0.3477 | Test MAE: 0.3800 | Time: 26.5233
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [276] Train Loss: 0.1307 | Train MAE: 0.1295 | Val Loss: 0.3547 | Val MAE: 0.3536 | Test MAE: 0.3820 | Time: 26.9768
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [277] Train Loss: 0.1319 | Train MAE: 0.1307 | Val Loss: 0.3501 | Val MAE: 0.3489 | Test MAE: 0.3815 | Time: 25.6242
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [278] Train Loss: 0.1397 | Train MAE: 0.1385 | Val Loss: 0.3578 | Val MAE: 0.3567 | Test MAE: 0.3949 | Time: 25.8926
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [279] Train Loss: 0.1604 | Train MAE: 0.1592 | Val Loss: 0.3595 | Val MAE: 0.3584 | Test MAE: 0.4008 | Time: 25.8813
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [280] Train Loss: 0.1393 | Train MAE: 0.1381 | Val Loss: 0.3599 | Val MAE: 0.3587 | Test MAE: 0.3924 | Time: 27.1652
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [281] Train Loss: 0.1363 | Train MAE: 0.1351 | Val Loss: 0.3509 | Val MAE: 0.3498 | Test MAE: 0.3825 | Time: 25.4128
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [282] Train Loss: 0.1353 | Train MAE: 0.1341 | Val Loss: 0.3511 | Val MAE: 0.3500 | Test MAE: 0.3810 | Time: 25.9925
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [283] Train Loss: 0.1510 | Train MAE: 0.1498 | Val Loss: 0.3483 | Val MAE: 0.3472 | Test MAE: 0.3808 | Time: 26.2781
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [284] Train Loss: 0.1325 | Train MAE: 0.1313 | Val Loss: 0.3432 | Val MAE: 0.3421 | Test MAE: 0.3795 | Time: 26.9948
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [285] Train Loss: 0.1354 | Train MAE: 0.1341 | Val Loss: 0.3543 | Val MAE: 0.3531 | Test MAE: 0.3816 | Time: 24.8980
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [286] Train Loss: 0.1335 | Train MAE: 0.1323 | Val Loss: 0.3499 | Val MAE: 0.3488 | Test MAE: 0.3834 | Time: 26.0553
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [287] Train Loss: 0.1419 | Train MAE: 0.1407 | Val Loss: 0.3499 | Val MAE: 0.3488 | Test MAE: 0.3820 | Time: 26.2608
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [288] Train Loss: 0.1416 | Train MAE: 0.1403 | Val Loss: 0.3548 | Val MAE: 0.3537 | Test MAE: 0.3806 | Time: 26.3370
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [289] Train Loss: 0.1362 | Train MAE: 0.1350 | Val Loss: 0.3533 | Val MAE: 0.3522 | Test MAE: 0.3839 | Time: 26.3100
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [290] Train Loss: 0.1442 | Train MAE: 0.1429 | Val Loss: 0.3462 | Val MAE: 0.3451 | Test MAE: 0.3791 | Time: 26.1634
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [291] Train Loss: 0.1371 | Train MAE: 0.1359 | Val Loss: 0.3640 | Val MAE: 0.3629 | Test MAE: 0.3844 | Time: 26.1104
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [292] Train Loss: 0.1377 | Train MAE: 0.1365 | Val Loss: 0.3488 | Val MAE: 0.3476 | Test MAE: 0.3803 | Time: 25.9850
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [293] Train Loss: 0.1401 | Train MAE: 0.1388 | Val Loss: 0.3556 | Val MAE: 0.3545 | Test MAE: 0.3787 | Time: 26.7849
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [294] Train Loss: 0.1326 | Train MAE: 0.1314 | Val Loss: 0.3484 | Val MAE: 0.3473 | Test MAE: 0.3757 | Time: 25.2081
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [295] Train Loss: 0.1445 | Train MAE: 0.1433 | Val Loss: 0.3684 | Val MAE: 0.3673 | Test MAE: 0.4026 | Time: 25.9058
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [296] Train Loss: 0.1304 | Train MAE: 0.1292 | Val Loss: 0.3462 | Val MAE: 0.3451 | Test MAE: 0.3790 | Time: 25.8822
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [297] Train Loss: 0.1383 | Train MAE: 0.1370 | Val Loss: 0.3457 | Val MAE: 0.3445 | Test MAE: 0.3817 | Time: 26.2647
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [298] Train Loss: 0.1385 | Train MAE: 0.1373 | Val Loss: 0.3464 | Val MAE: 0.3452 | Test MAE: 0.3843 | Time: 26.3919
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [299] Train Loss: 0.1377 | Train MAE: 0.1365 | Val Loss: 0.3577 | Val MAE: 0.3566 | Test MAE: 0.3880 | Time: 25.3485
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [300] Train Loss: 0.1430 | Train MAE: 0.1418 | Val Loss: 0.3707 | Val MAE: 0.3695 | Test MAE: 0.4063 | Time: 25.7145
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [301] Train Loss: 0.1325 | Train MAE: 0.1313 | Val Loss: 0.3501 | Val MAE: 0.3489 | Test MAE: 0.3786 | Time: 26.3499
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [302] Train Loss: 0.1452 | Train MAE: 0.1439 | Val Loss: 0.3579 | Val MAE: 0.3568 | Test MAE: 0.3786 | Time: 26.5086
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [303] Train Loss: 0.1291 | Train MAE: 0.1279 | Val Loss: 0.3576 | Val MAE: 0.3565 | Test MAE: 0.3793 | Time: 25.3185
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [304] Train Loss: 0.1316 | Train MAE: 0.1304 | Val Loss: 0.3486 | Val MAE: 0.3474 | Test MAE: 0.3692 | Time: 26.1947
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [305] Train Loss: 0.1277 | Train MAE: 0.1265 | Val Loss: 0.3492 | Val MAE: 0.3480 | Test MAE: 0.3770 | Time: 26.7002
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [306] Train Loss: 0.1317 | Train MAE: 0.1305 | Val Loss: 0.3497 | Val MAE: 0.3485 | Test MAE: 0.3777 | Time: 25.5064
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [307] Train Loss: 0.1336 | Train MAE: 0.1324 | Val Loss: 0.3451 | Val MAE: 0.3439 | Test MAE: 0.3730 | Time: 25.8596
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [308] Train Loss: 0.1315 | Train MAE: 0.1303 | Val Loss: 0.3560 | Val MAE: 0.3549 | Test MAE: 0.3834 | Time: 26.2502
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [309] Train Loss: 0.1387 | Train MAE: 0.1375 | Val Loss: 0.3466 | Val MAE: 0.3454 | Test MAE: 0.3721 | Time: 26.3248
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [310] Train Loss: 0.1358 | Train MAE: 0.1346 | Val Loss: 0.3478 | Val MAE: 0.3467 | Test MAE: 0.3807 | Time: 25.2476
Epoch 00311: reducing learning rate of group 0 to 1.2500e-04.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [311] Train Loss: 0.1322 | Train MAE: 0.1310 | Val Loss: 0.3464 | Val MAE: 0.3453 | Test MAE: 0.3773 | Time: 26.0286
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [312] Train Loss: 0.1156 | Train MAE: 0.1144 | Val Loss: 0.3485 | Val MAE: 0.3473 | Test MAE: 0.3761 | Time: 26.1740
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [313] Train Loss: 0.1167 | Train MAE: 0.1155 | Val Loss: 0.3522 | Val MAE: 0.3511 | Test MAE: 0.3782 | Time: 26.3946
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [314] Train Loss: 0.1222 | Train MAE: 0.1210 | Val Loss: 0.3468 | Val MAE: 0.3456 | Test MAE: 0.3776 | Time: 26.0127
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [315] Train Loss: 0.1143 | Train MAE: 0.1131 | Val Loss: 0.3513 | Val MAE: 0.3502 | Test MAE: 0.3794 | Time: 25.5012
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [316] Train Loss: 0.1232 | Train MAE: 0.1220 | Val Loss: 0.3459 | Val MAE: 0.3448 | Test MAE: 0.3750 | Time: 26.1896
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [317] Train Loss: 0.1205 | Train MAE: 0.1193 | Val Loss: 0.3479 | Val MAE: 0.3468 | Test MAE: 0.3750 | Time: 26.2434
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [318] Train Loss: 0.1177 | Train MAE: 0.1165 | Val Loss: 0.3503 | Val MAE: 0.3492 | Test MAE: 0.3773 | Time: 26.7196
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [319] Train Loss: 0.1212 | Train MAE: 0.1200 | Val Loss: 0.3534 | Val MAE: 0.3522 | Test MAE: 0.3788 | Time: 25.8572
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [320] Train Loss: 0.1144 | Train MAE: 0.1132 | Val Loss: 0.3509 | Val MAE: 0.3498 | Test MAE: 0.3812 | Time: 25.5127
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [321] Train Loss: 0.1190 | Train MAE: 0.1178 | Val Loss: 0.3546 | Val MAE: 0.3535 | Test MAE: 0.3763 | Time: 25.7601
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [322] Train Loss: 0.1274 | Train MAE: 0.1262 | Val Loss: 0.3627 | Val MAE: 0.3615 | Test MAE: 0.4004 | Time: 26.7723
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [323] Train Loss: 0.1219 | Train MAE: 0.1207 | Val Loss: 0.3441 | Val MAE: 0.3430 | Test MAE: 0.3759 | Time: 26.3216
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [324] Train Loss: 0.1184 | Train MAE: 0.1172 | Val Loss: 0.3477 | Val MAE: 0.3465 | Test MAE: 0.3753 | Time: 25.1903
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [325] Train Loss: 0.1198 | Train MAE: 0.1186 | Val Loss: 0.3515 | Val MAE: 0.3504 | Test MAE: 0.3859 | Time: 25.9222
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [326] Train Loss: 0.1202 | Train MAE: 0.1190 | Val Loss: 0.3501 | Val MAE: 0.3490 | Test MAE: 0.3806 | Time: 26.3943
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [327] Train Loss: 0.1124 | Train MAE: 0.1112 | Val Loss: 0.3523 | Val MAE: 0.3512 | Test MAE: 0.3841 | Time: 26.8829
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [328] Train Loss: 0.1265 | Train MAE: 0.1253 | Val Loss: 0.3520 | Val MAE: 0.3508 | Test MAE: 0.3761 | Time: 25.3534
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [329] Train Loss: 0.1186 | Train MAE: 0.1174 | Val Loss: 0.3494 | Val MAE: 0.3483 | Test MAE: 0.3781 | Time: 26.0705
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [330] Train Loss: 0.1157 | Train MAE: 0.1145 | Val Loss: 0.3496 | Val MAE: 0.3484 | Test MAE: 0.3786 | Time: 25.9187
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [331] Train Loss: 0.1183 | Train MAE: 0.1170 | Val Loss: 0.3463 | Val MAE: 0.3452 | Test MAE: 0.3848 | Time: 26.5950
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [332] Train Loss: 0.1161 | Train MAE: 0.1148 | Val Loss: 0.3463 | Val MAE: 0.3452 | Test MAE: 0.3768 | Time: 25.7599
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [333] Train Loss: 0.1160 | Train MAE: 0.1148 | Val Loss: 0.3513 | Val MAE: 0.3501 | Test MAE: 0.3779 | Time: 26.5252
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [334] Train Loss: 0.1146 | Train MAE: 0.1134 | Val Loss: 0.3502 | Val MAE: 0.3491 | Test MAE: 0.3812 | Time: 25.3245
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [335] Train Loss: 0.1134 | Train MAE: 0.1122 | Val Loss: 0.3510 | Val MAE: 0.3499 | Test MAE: 0.3809 | Time: 25.8560
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [336] Train Loss: 0.1164 | Train MAE: 0.1152 | Val Loss: 0.3497 | Val MAE: 0.3486 | Test MAE: 0.3826 | Time: 26.0466
Epoch 00337: reducing learning rate of group 0 to 6.2500e-05.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [337] Train Loss: 0.1076 | Train MAE: 0.1064 | Val Loss: 0.3495 | Val MAE: 0.3483 | Test MAE: 0.3782 | Time: 26.8248
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [338] Train Loss: 0.1130 | Train MAE: 0.1118 | Val Loss: 0.3571 | Val MAE: 0.3559 | Test MAE: 0.3774 | Time: 25.1833
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [339] Train Loss: 0.1135 | Train MAE: 0.1123 | Val Loss: 0.3467 | Val MAE: 0.3456 | Test MAE: 0.3778 | Time: 26.0297
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [340] Train Loss: 0.1192 | Train MAE: 0.1180 | Val Loss: 0.3484 | Val MAE: 0.3473 | Test MAE: 0.3738 | Time: 25.7851
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [341] Train Loss: 0.1079 | Train MAE: 0.1067 | Val Loss: 0.3469 | Val MAE: 0.3458 | Test MAE: 0.3780 | Time: 26.3792
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [342] Train Loss: 0.1094 | Train MAE: 0.1082 | Val Loss: 0.3478 | Val MAE: 0.3467 | Test MAE: 0.3744 | Time: 26.3473
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [343] Train Loss: 0.1052 | Train MAE: 0.1040 | Val Loss: 0.3510 | Val MAE: 0.3498 | Test MAE: 0.3801 | Time: 25.5295
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [344] Train Loss: 0.1190 | Train MAE: 0.1178 | Val Loss: 0.3481 | Val MAE: 0.3470 | Test MAE: 0.3787 | Time: 27.3132
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [345] Train Loss: 0.1065 | Train MAE: 0.1053 | Val Loss: 0.3435 | Val MAE: 0.3423 | Test MAE: 0.3769 | Time: 26.5688
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [346] Train Loss: 0.1123 | Train MAE: 0.1111 | Val Loss: 0.3469 | Val MAE: 0.3458 | Test MAE: 0.3774 | Time: 25.3809
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [347] Train Loss: 0.1102 | Train MAE: 0.1089 | Val Loss: 0.3507 | Val MAE: 0.3495 | Test MAE: 0.3780 | Time: 25.9000
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [348] Train Loss: 0.1128 | Train MAE: 0.1116 | Val Loss: 0.3557 | Val MAE: 0.3545 | Test MAE: 0.3787 | Time: 25.8100
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [349] Train Loss: 0.1166 | Train MAE: 0.1154 | Val Loss: 0.3501 | Val MAE: 0.3489 | Test MAE: 0.3787 | Time: 26.3961
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [350] Train Loss: 0.1133 | Train MAE: 0.1121 | Val Loss: 0.3503 | Val MAE: 0.3492 | Test MAE: 0.3802 | Time: 26.4231
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [351] Train Loss: 0.1112 | Train MAE: 0.1100 | Val Loss: 0.3474 | Val MAE: 0.3463 | Test MAE: 0.3750 | Time: 25.2182
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [352] Train Loss: 0.1119 | Train MAE: 0.1106 | Val Loss: 0.3542 | Val MAE: 0.3531 | Test MAE: 0.3810 | Time: 25.2464
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [353] Train Loss: 0.1121 | Train MAE: 0.1109 | Val Loss: 0.3500 | Val MAE: 0.3489 | Test MAE: 0.3784 | Time: 25.9085
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [354] Train Loss: 0.1062 | Train MAE: 0.1050 | Val Loss: 0.3498 | Val MAE: 0.3487 | Test MAE: 0.3773 | Time: 26.1338
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [355] Train Loss: 0.1025 | Train MAE: 0.1013 | Val Loss: 0.3473 | Val MAE: 0.3462 | Test MAE: 0.3783 | Time: 25.2433
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [356] Train Loss: 0.1147 | Train MAE: 0.1135 | Val Loss: 0.3540 | Val MAE: 0.3528 | Test MAE: 0.3828 | Time: 26.4898
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [357] Train Loss: 0.1122 | Train MAE: 0.1110 | Val Loss: 0.3530 | Val MAE: 0.3518 | Test MAE: 0.3819 | Time: 26.3926
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [358] Train Loss: 0.1012 | Train MAE: 0.1000 | Val Loss: 0.3492 | Val MAE: 0.3481 | Test MAE: 0.3769 | Time: 24.8804
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [359] Train Loss: 0.1177 | Train MAE: 0.1165 | Val Loss: 0.3591 | Val MAE: 0.3580 | Test MAE: 0.3865 | Time: 25.5253
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [360] Train Loss: 0.1043 | Train MAE: 0.1031 | Val Loss: 0.3515 | Val MAE: 0.3503 | Test MAE: 0.3775 | Time: 26.0543
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [361] Train Loss: 0.1179 | Train MAE: 0.1167 | Val Loss: 0.3494 | Val MAE: 0.3483 | Test MAE: 0.3785 | Time: 25.5113
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [362] Train Loss: 0.1144 | Train MAE: 0.1132 | Val Loss: 0.3639 | Val MAE: 0.3628 | Test MAE: 0.3918 | Time: 26.4245
Epoch 00363: reducing learning rate of group 0 to 3.1250e-05.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [363] Train Loss: 0.1036 | Train MAE: 0.1023 | Val Loss: 0.3515 | Val MAE: 0.3503 | Test MAE: 0.3790 | Time: 25.3238
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [364] Train Loss: 0.0983 | Train MAE: 0.0971 | Val Loss: 0.3476 | Val MAE: 0.3464 | Test MAE: 0.3775 | Time: 24.5117
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [365] Train Loss: 0.1057 | Train MAE: 0.1045 | Val Loss: 0.3544 | Val MAE: 0.3532 | Test MAE: 0.3813 | Time: 25.2417
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [366] Train Loss: 0.0976 | Train MAE: 0.0964 | Val Loss: 0.3485 | Val MAE: 0.3473 | Test MAE: 0.3766 | Time: 25.5491
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [367] Train Loss: 0.0994 | Train MAE: 0.0982 | Val Loss: 0.3481 | Val MAE: 0.3469 | Test MAE: 0.3777 | Time: 24.8158
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [368] Train Loss: 0.1081 | Train MAE: 0.1069 | Val Loss: 0.3502 | Val MAE: 0.3491 | Test MAE: 0.3776 | Time: 23.8402
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [369] Train Loss: 0.1044 | Train MAE: 0.1032 | Val Loss: 0.3520 | Val MAE: 0.3509 | Test MAE: 0.3785 | Time: 25.1557
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [370] Train Loss: 0.1064 | Train MAE: 0.1052 | Val Loss: 0.3479 | Val MAE: 0.3467 | Test MAE: 0.3749 | Time: 25.4360
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [371] Train Loss: 0.1026 | Train MAE: 0.1014 | Val Loss: 0.3497 | Val MAE: 0.3486 | Test MAE: 0.3806 | Time: 26.1524
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [372] Train Loss: 0.1022 | Train MAE: 0.1010 | Val Loss: 0.3513 | Val MAE: 0.3502 | Test MAE: 0.3806 | Time: 25.2301
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [373] Train Loss: 0.1036 | Train MAE: 0.1024 | Val Loss: 0.3485 | Val MAE: 0.3473 | Test MAE: 0.3758 | Time: 26.4156
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [374] Train Loss: 0.1067 | Train MAE: 0.1055 | Val Loss: 0.3523 | Val MAE: 0.3511 | Test MAE: 0.3809 | Time: 24.9193
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [375] Train Loss: 0.1004 | Train MAE: 0.0992 | Val Loss: 0.3508 | Val MAE: 0.3497 | Test MAE: 0.3782 | Time: 26.4398
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [376] Train Loss: 0.1009 | Train MAE: 0.0997 | Val Loss: 0.3516 | Val MAE: 0.3504 | Test MAE: 0.3788 | Time: 25.4956
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [377] Train Loss: 0.1015 | Train MAE: 0.1003 | Val Loss: 0.3534 | Val MAE: 0.3523 | Test MAE: 0.3804 | Time: 25.4254
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [378] Train Loss: 0.1024 | Train MAE: 0.1011 | Val Loss: 0.3466 | Val MAE: 0.3455 | Test MAE: 0.3772 | Time: 25.6440
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [379] Train Loss: 0.1055 | Train MAE: 0.1043 | Val Loss: 0.3511 | Val MAE: 0.3500 | Test MAE: 0.3788 | Time: 26.1492
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [380] Train Loss: 0.1038 | Train MAE: 0.1026 | Val Loss: 0.3493 | Val MAE: 0.3481 | Test MAE: 0.3818 | Time: 26.6769
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [381] Train Loss: 0.1051 | Train MAE: 0.1039 | Val Loss: 0.3492 | Val MAE: 0.3480 | Test MAE: 0.3784 | Time: 27.0261
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [382] Train Loss: 0.1130 | Train MAE: 0.1117 | Val Loss: 0.3519 | Val MAE: 0.3508 | Test MAE: 0.3764 | Time: 25.8166
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [383] Train Loss: 0.1020 | Train MAE: 0.1008 | Val Loss: 0.3497 | Val MAE: 0.3485 | Test MAE: 0.3805 | Time: 26.0122
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [384] Train Loss: 0.1024 | Train MAE: 0.1012 | Val Loss: 0.3508 | Val MAE: 0.3496 | Test MAE: 0.3800 | Time: 25.5791
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [385] Train Loss: 0.1035 | Train MAE: 0.1023 | Val Loss: 0.3513 | Val MAE: 0.3502 | Test MAE: 0.3797 | Time: 24.0329
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [386] Train Loss: 0.1045 | Train MAE: 0.1033 | Val Loss: 0.3522 | Val MAE: 0.3511 | Test MAE: 0.3780 | Time: 24.4649
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [387] Train Loss: 0.1106 | Train MAE: 0.1094 | Val Loss: 0.3496 | Val MAE: 0.3484 | Test MAE: 0.3759 | Time: 24.3342
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [388] Train Loss: 0.1118 | Train MAE: 0.1106 | Val Loss: 0.3479 | Val MAE: 0.3467 | Test MAE: 0.3746 | Time: 25.0308
Epoch 00389: reducing learning rate of group 0 to 1.5625e-05.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [389] Train Loss: 0.1066 | Train MAE: 0.1053 | Val Loss: 0.3499 | Val MAE: 0.3488 | Test MAE: 0.3771 | Time: 23.9359
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [390] Train Loss: 0.1008 | Train MAE: 0.0996 | Val Loss: 0.3518 | Val MAE: 0.3506 | Test MAE: 0.3779 | Time: 26.3549
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [391] Train Loss: 0.1008 | Train MAE: 0.0995 | Val Loss: 0.3476 | Val MAE: 0.3465 | Test MAE: 0.3759 | Time: 25.1320
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [392] Train Loss: 0.1001 | Train MAE: 0.0989 | Val Loss: 0.3501 | Val MAE: 0.3490 | Test MAE: 0.3751 | Time: 23.6036
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [393] Train Loss: 0.1035 | Train MAE: 0.1022 | Val Loss: 0.3513 | Val MAE: 0.3501 | Test MAE: 0.3772 | Time: 24.2200
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [394] Train Loss: 0.1039 | Train MAE: 0.1027 | Val Loss: 0.3518 | Val MAE: 0.3507 | Test MAE: 0.3792 | Time: 24.6457
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [395] Train Loss: 0.1010 | Train MAE: 0.0998 | Val Loss: 0.3511 | Val MAE: 0.3500 | Test MAE: 0.3773 | Time: 25.6128
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [396] Train Loss: 0.1017 | Train MAE: 0.1005 | Val Loss: 0.3488 | Val MAE: 0.3477 | Test MAE: 0.3785 | Time: 24.3237
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [397] Train Loss: 0.1000 | Train MAE: 0.0988 | Val Loss: 0.3505 | Val MAE: 0.3494 | Test MAE: 0.3788 | Time: 24.6507
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [398] Train Loss: 0.1004 | Train MAE: 0.0992 | Val Loss: 0.3521 | Val MAE: 0.3509 | Test MAE: 0.3790 | Time: 24.4440
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [399] Train Loss: 0.0969 | Train MAE: 0.0956 | Val Loss: 0.3509 | Val MAE: 0.3498 | Test MAE: 0.3773 | Time: 24.9636
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [400] Train Loss: 0.0955 | Train MAE: 0.0942 | Val Loss: 0.3508 | Val MAE: 0.3496 | Test MAE: 0.3770 | Time: 25.1946
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [401] Train Loss: 0.1009 | Train MAE: 0.0997 | Val Loss: 0.3508 | Val MAE: 0.3496 | Test MAE: 0.3789 | Time: 24.2529
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [402] Train Loss: 0.1102 | Train MAE: 0.1090 | Val Loss: 0.3542 | Val MAE: 0.3531 | Test MAE: 0.3787 | Time: 24.6820
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [403] Train Loss: 0.1024 | Train MAE: 0.1012 | Val Loss: 0.3492 | Val MAE: 0.3480 | Test MAE: 0.3780 | Time: 24.7237
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [404] Train Loss: 0.1010 | Train MAE: 0.0998 | Val Loss: 0.3481 | Val MAE: 0.3469 | Test MAE: 0.3746 | Time: 24.3728
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [405] Train Loss: 0.1067 | Train MAE: 0.1055 | Val Loss: 0.3497 | Val MAE: 0.3486 | Test MAE: 0.3768 | Time: 23.9403
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [406] Train Loss: 0.0977 | Train MAE: 0.0965 | Val Loss: 0.3532 | Val MAE: 0.3520 | Test MAE: 0.3817 | Time: 24.2664
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [407] Train Loss: 0.0992 | Train MAE: 0.0980 | Val Loss: 0.3471 | Val MAE: 0.3459 | Test MAE: 0.3731 | Time: 24.8457
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [408] Train Loss: 0.1051 | Train MAE: 0.1038 | Val Loss: 0.3515 | Val MAE: 0.3504 | Test MAE: 0.3773 | Time: 24.7249
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [409] Train Loss: 0.1028 | Train MAE: 0.1016 | Val Loss: 0.3514 | Val MAE: 0.3503 | Test MAE: 0.3784 | Time: 25.3038
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [410] Train Loss: 0.0977 | Train MAE: 0.0965 | Val Loss: 0.3488 | Val MAE: 0.3477 | Test MAE: 0.3774 | Time: 23.7552
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [411] Train Loss: 0.0980 | Train MAE: 0.0968 | Val Loss: 0.3504 | Val MAE: 0.3492 | Test MAE: 0.3793 | Time: 24.6926
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [412] Train Loss: 0.1027 | Train MAE: 0.1015 | Val Loss: 0.3483 | Val MAE: 0.3471 | Test MAE: 0.3733 | Time: 23.8176
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [413] Train Loss: 0.0943 | Train MAE: 0.0930 | Val Loss: 0.3473 | Val MAE: 0.3461 | Test MAE: 0.3739 | Time: 24.2209
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [414] Train Loss: 0.1008 | Train MAE: 0.0996 | Val Loss: 0.3474 | Val MAE: 0.3463 | Test MAE: 0.3750 | Time: 24.7478
Epoch 00415: reducing learning rate of group 0 to 7.8125e-06.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [415] Train Loss: 0.1052 | Train MAE: 0.1039 | Val Loss: 0.3533 | Val MAE: 0.3521 | Test MAE: 0.3807 | Time: 25.0865
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [416] Train Loss: 0.1089 | Train MAE: 0.1076 | Val Loss: 0.3513 | Val MAE: 0.3502 | Test MAE: 0.3785 | Time: 23.8265
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [417] Train Loss: 0.0984 | Train MAE: 0.0972 | Val Loss: 0.3487 | Val MAE: 0.3476 | Test MAE: 0.3758 | Time: 24.1009
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [418] Train Loss: 0.1007 | Train MAE: 0.0995 | Val Loss: 0.3526 | Val MAE: 0.3515 | Test MAE: 0.3783 | Time: 24.8764
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [419] Train Loss: 0.1025 | Train MAE: 0.1013 | Val Loss: 0.3519 | Val MAE: 0.3507 | Test MAE: 0.3804 | Time: 25.0082
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [420] Train Loss: 0.1062 | Train MAE: 0.1049 | Val Loss: 0.3485 | Val MAE: 0.3474 | Test MAE: 0.3760 | Time: 23.9099
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [421] Train Loss: 0.1029 | Train MAE: 0.1017 | Val Loss: 0.3474 | Val MAE: 0.3463 | Test MAE: 0.3751 | Time: 24.0765
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [422] Train Loss: 0.1014 | Train MAE: 0.1002 | Val Loss: 0.3468 | Val MAE: 0.3456 | Test MAE: 0.3743 | Time: 24.4023
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [423] Train Loss: 0.1091 | Train MAE: 0.1079 | Val Loss: 0.3646 | Val MAE: 0.3634 | Test MAE: 0.3969 | Time: 24.5728
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [424] Train Loss: 0.0928 | Train MAE: 0.0916 | Val Loss: 0.3540 | Val MAE: 0.3529 | Test MAE: 0.3819 | Time: 24.5797
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [425] Train Loss: 0.1015 | Train MAE: 0.1003 | Val Loss: 0.3517 | Val MAE: 0.3506 | Test MAE: 0.3793 | Time: 24.8728
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [426] Train Loss: 0.1070 | Train MAE: 0.1058 | Val Loss: 0.3515 | Val MAE: 0.3503 | Test MAE: 0.3800 | Time: 23.5439
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [427] Train Loss: 0.0997 | Train MAE: 0.0985 | Val Loss: 0.3479 | Val MAE: 0.3467 | Test MAE: 0.3766 | Time: 24.2271
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [428] Train Loss: 0.1013 | Train MAE: 0.1001 | Val Loss: 0.3515 | Val MAE: 0.3504 | Test MAE: 0.3787 | Time: 24.3704
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [429] Train Loss: 0.1004 | Train MAE: 0.0991 | Val Loss: 0.3532 | Val MAE: 0.3520 | Test MAE: 0.3791 | Time: 24.5441
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [430] Train Loss: 0.0984 | Train MAE: 0.0972 | Val Loss: 0.3499 | Val MAE: 0.3487 | Test MAE: 0.3778 | Time: 24.5586
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [431] Train Loss: 0.1072 | Train MAE: 0.1060 | Val Loss: 0.3509 | Val MAE: 0.3498 | Test MAE: 0.3799 | Time: 23.5185
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [432] Train Loss: 0.0961 | Train MAE: 0.0949 | Val Loss: 0.3496 | Val MAE: 0.3484 | Test MAE: 0.3775 | Time: 24.6559
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [433] Train Loss: 0.0982 | Train MAE: 0.0970 | Val Loss: 0.3490 | Val MAE: 0.3478 | Test MAE: 0.3778 | Time: 24.3015
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [434] Train Loss: 0.1029 | Train MAE: 0.1017 | Val Loss: 0.3477 | Val MAE: 0.3465 | Test MAE: 0.3758 | Time: 23.5165
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [435] Train Loss: 0.0951 | Train MAE: 0.0939 | Val Loss: 0.3480 | Val MAE: 0.3469 | Test MAE: 0.3754 | Time: 24.0964
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [436] Train Loss: 0.1031 | Train MAE: 0.1019 | Val Loss: 0.3500 | Val MAE: 0.3488 | Test MAE: 0.3779 | Time: 24.6198
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [437] Train Loss: 0.1041 | Train MAE: 0.1029 | Val Loss: 0.3502 | Val MAE: 0.3491 | Test MAE: 0.3771 | Time: 24.6047
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [438] Train Loss: 0.1011 | Train MAE: 0.0999 | Val Loss: 0.3511 | Val MAE: 0.3499 | Test MAE: 0.3808 | Time: 24.6065
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [439] Train Loss: 0.0992 | Train MAE: 0.0980 | Val Loss: 0.3542 | Val MAE: 0.3530 | Test MAE: 0.3795 | Time: 24.3258
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [440] Train Loss: 0.0970 | Train MAE: 0.0958 | Val Loss: 0.3493 | Val MAE: 0.3482 | Test MAE: 0.3776 | Time: 23.6830
Epoch 00441: reducing learning rate of group 0 to 3.9063e-06.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [441] Train Loss: 0.1013 | Train MAE: 0.1001 | Val Loss: 0.3504 | Val MAE: 0.3493 | Test MAE: 0.3760 | Time: 24.0405
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [442] Train Loss: 0.0992 | Train MAE: 0.0980 | Val Loss: 0.3504 | Val MAE: 0.3493 | Test MAE: 0.3776 | Time: 24.6450
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [443] Train Loss: 0.1029 | Train MAE: 0.1017 | Val Loss: 0.3510 | Val MAE: 0.3498 | Test MAE: 0.3794 | Time: 24.3444
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [444] Train Loss: 0.1010 | Train MAE: 0.0998 | Val Loss: 0.3504 | Val MAE: 0.3493 | Test MAE: 0.3785 | Time: 24.6178
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [445] Train Loss: 0.0982 | Train MAE: 0.0970 | Val Loss: 0.3504 | Val MAE: 0.3493 | Test MAE: 0.3779 | Time: 24.3577
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [446] Train Loss: 0.0936 | Train MAE: 0.0924 | Val Loss: 0.3490 | Val MAE: 0.3479 | Test MAE: 0.3777 | Time: 24.2370
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [447] Train Loss: 0.0990 | Train MAE: 0.0977 | Val Loss: 0.3519 | Val MAE: 0.3508 | Test MAE: 0.3771 | Time: 24.0720
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [448] Train Loss: 0.1042 | Train MAE: 0.1030 | Val Loss: 0.3638 | Val MAE: 0.3627 | Test MAE: 0.3963 | Time: 25.3599
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [449] Train Loss: 0.0994 | Train MAE: 0.0982 | Val Loss: 0.3503 | Val MAE: 0.3492 | Test MAE: 0.3780 | Time: 23.5952
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [450] Train Loss: 0.1024 | Train MAE: 0.1012 | Val Loss: 0.3474 | Val MAE: 0.3463 | Test MAE: 0.3734 | Time: 24.3667
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [451] Train Loss: 0.0987 | Train MAE: 0.0975 | Val Loss: 0.3485 | Val MAE: 0.3474 | Test MAE: 0.3761 | Time: 24.1915
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [452] Train Loss: 0.1046 | Train MAE: 0.1034 | Val Loss: 0.3504 | Val MAE: 0.3492 | Test MAE: 0.3773 | Time: 24.6028
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [453] Train Loss: 0.0940 | Train MAE: 0.0928 | Val Loss: 0.3478 | Val MAE: 0.3466 | Test MAE: 0.3765 | Time: 24.6763
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [454] Train Loss: 0.1023 | Train MAE: 0.1011 | Val Loss: 0.3481 | Val MAE: 0.3469 | Test MAE: 0.3765 | Time: 23.7522
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [455] Train Loss: 0.0946 | Train MAE: 0.0934 | Val Loss: 0.3498 | Val MAE: 0.3487 | Test MAE: 0.3776 | Time: 24.6667
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [456] Train Loss: 0.1015 | Train MAE: 0.1003 | Val Loss: 0.3521 | Val MAE: 0.3510 | Test MAE: 0.3802 | Time: 23.7427
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [457] Train Loss: 0.1026 | Train MAE: 0.1014 | Val Loss: 0.3571 | Val MAE: 0.3559 | Test MAE: 0.3848 | Time: 24.4492
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [458] Train Loss: 0.0957 | Train MAE: 0.0945 | Val Loss: 0.3490 | Val MAE: 0.3479 | Test MAE: 0.3777 | Time: 24.2527
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [459] Train Loss: 0.0975 | Train MAE: 0.0962 | Val Loss: 0.3502 | Val MAE: 0.3491 | Test MAE: 0.3762 | Time: 24.5952
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [460] Train Loss: 0.0946 | Train MAE: 0.0934 | Val Loss: 0.3514 | Val MAE: 0.3503 | Test MAE: 0.3790 | Time: 24.8637
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [461] Train Loss: 0.1034 | Train MAE: 0.1022 | Val Loss: 0.3493 | Val MAE: 0.3482 | Test MAE: 0.3771 | Time: 23.5846
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [462] Train Loss: 0.0985 | Train MAE: 0.0973 | Val Loss: 0.3536 | Val MAE: 0.3524 | Test MAE: 0.3783 | Time: 24.0320
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [463] Train Loss: 0.0924 | Train MAE: 0.0912 | Val Loss: 0.3502 | Val MAE: 0.3491 | Test MAE: 0.3781 | Time: 24.2220
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [464] Train Loss: 0.0978 | Train MAE: 0.0966 | Val Loss: 0.3503 | Val MAE: 0.3492 | Test MAE: 0.3804 | Time: 24.3830
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [465] Train Loss: 0.1056 | Train MAE: 0.1043 | Val Loss: 0.3476 | Val MAE: 0.3465 | Test MAE: 0.3751 | Time: 24.4962
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [466] Train Loss: 0.0986 | Train MAE: 0.0974 | Val Loss: 0.3493 | Val MAE: 0.3481 | Test MAE: 0.3792 | Time: 24.2382
Epoch 00467: reducing learning rate of group 0 to 1.9531e-06.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [467] Train Loss: 0.1033 | Train MAE: 0.1020 | Val Loss: 0.3474 | Val MAE: 0.3463 | Test MAE: 0.3760 | Time: 23.6768
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [468] Train Loss: 0.1006 | Train MAE: 0.0994 | Val Loss: 0.3530 | Val MAE: 0.3519 | Test MAE: 0.3806 | Time: 24.1836
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [469] Train Loss: 0.0995 | Train MAE: 0.0983 | Val Loss: 0.3530 | Val MAE: 0.3518 | Test MAE: 0.3812 | Time: 24.0871
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [470] Train Loss: 0.0989 | Train MAE: 0.0977 | Val Loss: 0.3476 | Val MAE: 0.3464 | Test MAE: 0.3771 | Time: 23.9493
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [471] Train Loss: 0.0912 | Train MAE: 0.0900 | Val Loss: 0.3490 | Val MAE: 0.3478 | Test MAE: 0.3781 | Time: 24.6913
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [472] Train Loss: 0.0966 | Train MAE: 0.0954 | Val Loss: 0.3507 | Val MAE: 0.3496 | Test MAE: 0.3768 | Time: 24.2879
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [473] Train Loss: 0.0936 | Train MAE: 0.0924 | Val Loss: 0.3491 | Val MAE: 0.3479 | Test MAE: 0.3772 | Time: 25.0588
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [474] Train Loss: 0.0917 | Train MAE: 0.0905 | Val Loss: 0.3526 | Val MAE: 0.3514 | Test MAE: 0.3779 | Time: 24.7652
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [475] Train Loss: 0.1045 | Train MAE: 0.1033 | Val Loss: 0.3538 | Val MAE: 0.3527 | Test MAE: 0.3773 | Time: 23.8603
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [476] Train Loss: 0.0982 | Train MAE: 0.0970 | Val Loss: 0.3484 | Val MAE: 0.3473 | Test MAE: 0.3777 | Time: 24.1846
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [477] Train Loss: 0.1028 | Train MAE: 0.1016 | Val Loss: 0.3509 | Val MAE: 0.3498 | Test MAE: 0.3789 | Time: 24.4764
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [478] Train Loss: 0.1011 | Train MAE: 0.0999 | Val Loss: 0.3524 | Val MAE: 0.3513 | Test MAE: 0.3799 | Time: 24.3542
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [479] Train Loss: 0.0982 | Train MAE: 0.0970 | Val Loss: 0.3541 | Val MAE: 0.3530 | Test MAE: 0.3795 | Time: 23.7479
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [480] Train Loss: 0.0976 | Train MAE: 0.0964 | Val Loss: 0.3512 | Val MAE: 0.3501 | Test MAE: 0.3775 | Time: 24.0112
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [481] Train Loss: 0.1017 | Train MAE: 0.1005 | Val Loss: 0.3534 | Val MAE: 0.3523 | Test MAE: 0.3809 | Time: 24.6293
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [482] Train Loss: 0.0977 | Train MAE: 0.0965 | Val Loss: 0.3468 | Val MAE: 0.3457 | Test MAE: 0.3754 | Time: 24.6372
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [483] Train Loss: 0.0922 | Train MAE: 0.0910 | Val Loss: 0.3504 | Val MAE: 0.3493 | Test MAE: 0.3790 | Time: 25.5215
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [484] Train Loss: 0.0972 | Train MAE: 0.0960 | Val Loss: 0.3471 | Val MAE: 0.3460 | Test MAE: 0.3779 | Time: 23.7974
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [485] Train Loss: 0.1095 | Train MAE: 0.1083 | Val Loss: 0.3513 | Val MAE: 0.3501 | Test MAE: 0.3773 | Time: 24.3678
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [486] Train Loss: 0.0987 | Train MAE: 0.0975 | Val Loss: 0.3536 | Val MAE: 0.3524 | Test MAE: 0.3810 | Time: 24.5621
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [487] Train Loss: 0.1041 | Train MAE: 0.1029 | Val Loss: 0.3479 | Val MAE: 0.3467 | Test MAE: 0.3741 | Time: 24.8705
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [488] Train Loss: 0.1023 | Train MAE: 0.1011 | Val Loss: 0.3531 | Val MAE: 0.3520 | Test MAE: 0.3802 | Time: 24.0276
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [489] Train Loss: 0.1060 | Train MAE: 0.1048 | Val Loss: 0.3575 | Val MAE: 0.3564 | Test MAE: 0.3837 | Time: 24.4485
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [490] Train Loss: 0.0991 | Train MAE: 0.0979 | Val Loss: 0.3505 | Val MAE: 0.3494 | Test MAE: 0.3762 | Time: 23.7683
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [491] Train Loss: 0.0957 | Train MAE: 0.0945 | Val Loss: 0.3516 | Val MAE: 0.3505 | Test MAE: 0.3816 | Time: 24.3697
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [492] Train Loss: 0.1024 | Train MAE: 0.1012 | Val Loss: 0.3517 | Val MAE: 0.3506 | Test MAE: 0.3787 | Time: 24.3432
Epoch 00493: reducing learning rate of group 0 to 9.7656e-07.

!! LR EQUAL TO MIN LR SET.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Test MAE: 0.3787
Train MAE: 0.0654
Convergence Time (Epochs): 492.0000
TOTAL TIME TAKEN: 12754.9121s
AVG TIME PER EPOCH: 25.6815s
