WARNING:root:The OGB package is out of date. Your version is 1.3.3, while the latest version is 1.3.4.
cuda available with GPU: NVIDIA GeForce GTX 1080 Ti
[I] Loading dataset ZINC...
train, test, val sizes : 10000 1000 1000
[I] Finished loading.
[I] Data load time: 11.5310s
Using 3 automata for GAPE
MODEL DETAILS:

MODEL/Total parameters: GatedGCN 534015
Using 3 automata for GAPE
[!] Adding random automaton graph positional encoding (32).
[!] Using 3 random automata.
Training Graphs:  10000
Validation Graphs:  1000
Test Graphs:  1000
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [0] Train Loss: 1.4698 | Train MAE: 1.4687 | Val Loss: 1.3981 | Val MAE: 1.3971 | Test MAE: 1.5089 | Time: 28.4893
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [1] Train Loss: 1.4049 | Train MAE: 1.4038 | Val Loss: 1.4339 | Val MAE: 1.4329 | Test MAE: 1.4968 | Time: 26.3801
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [2] Train Loss: 1.3491 | Train MAE: 1.3480 | Val Loss: 1.3644 | Val MAE: 1.3634 | Test MAE: 1.4597 | Time: 26.8770
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [3] Train Loss: 1.2377 | Train MAE: 1.2366 | Val Loss: 1.2599 | Val MAE: 1.2588 | Test MAE: 1.3183 | Time: 27.3606
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [4] Train Loss: 1.1379 | Train MAE: 1.1368 | Val Loss: 1.1528 | Val MAE: 1.1518 | Test MAE: 1.1998 | Time: 27.0213
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [5] Train Loss: 1.0875 | Train MAE: 1.0863 | Val Loss: 0.9884 | Val MAE: 0.9873 | Test MAE: 1.0557 | Time: 25.7157
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [6] Train Loss: 1.0303 | Train MAE: 1.0291 | Val Loss: 0.9717 | Val MAE: 0.9707 | Test MAE: 1.0176 | Time: 26.4959
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [7] Train Loss: 0.9364 | Train MAE: 0.9352 | Val Loss: 1.1094 | Val MAE: 1.1083 | Test MAE: 1.1362 | Time: 26.6965
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [8] Train Loss: 0.9523 | Train MAE: 0.9512 | Val Loss: 0.9415 | Val MAE: 0.9404 | Test MAE: 0.9608 | Time: 27.0807
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [9] Train Loss: 0.8397 | Train MAE: 0.8385 | Val Loss: 0.8168 | Val MAE: 0.8157 | Test MAE: 0.8793 | Time: 25.3727
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [10] Train Loss: 0.8421 | Train MAE: 0.8410 | Val Loss: 0.7855 | Val MAE: 0.7845 | Test MAE: 0.8421 | Time: 26.4986
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [11] Train Loss: 0.8148 | Train MAE: 0.8137 | Val Loss: 0.7476 | Val MAE: 0.7466 | Test MAE: 0.8099 | Time: 27.1069
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [12] Train Loss: 0.7794 | Train MAE: 0.7782 | Val Loss: 0.7832 | Val MAE: 0.7821 | Test MAE: 0.8361 | Time: 26.2346
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [13] Train Loss: 0.7705 | Train MAE: 0.7693 | Val Loss: 0.8624 | Val MAE: 0.8614 | Test MAE: 0.9027 | Time: 27.1766
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [14] Train Loss: 0.7800 | Train MAE: 0.7789 | Val Loss: 0.8388 | Val MAE: 0.8377 | Test MAE: 0.8796 | Time: 25.4022
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [15] Train Loss: 0.7778 | Train MAE: 0.7766 | Val Loss: 0.7886 | Val MAE: 0.7875 | Test MAE: 0.8263 | Time: 26.2171
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [16] Train Loss: 0.7749 | Train MAE: 0.7737 | Val Loss: 0.8809 | Val MAE: 0.8798 | Test MAE: 0.9312 | Time: 26.7172
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [17] Train Loss: 0.7869 | Train MAE: 0.7858 | Val Loss: 0.7498 | Val MAE: 0.7487 | Test MAE: 0.8147 | Time: 27.7199
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [18] Train Loss: 0.7294 | Train MAE: 0.7283 | Val Loss: 0.7582 | Val MAE: 0.7571 | Test MAE: 0.8211 | Time: 26.2921
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [19] Train Loss: 0.7393 | Train MAE: 0.7381 | Val Loss: 0.8458 | Val MAE: 0.8447 | Test MAE: 0.8686 | Time: 27.0259
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [20] Train Loss: 0.7409 | Train MAE: 0.7398 | Val Loss: 0.7223 | Val MAE: 0.7212 | Test MAE: 0.7742 | Time: 27.4219
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [21] Train Loss: 0.7548 | Train MAE: 0.7537 | Val Loss: 0.7045 | Val MAE: 0.7034 | Test MAE: 0.7705 | Time: 27.1898
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [22] Train Loss: 0.7128 | Train MAE: 0.7117 | Val Loss: 0.7241 | Val MAE: 0.7230 | Test MAE: 0.7676 | Time: 26.5930
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [23] Train Loss: 0.7353 | Train MAE: 0.7341 | Val Loss: 0.7291 | Val MAE: 0.7281 | Test MAE: 0.8007 | Time: 27.1543
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [24] Train Loss: 0.7149 | Train MAE: 0.7138 | Val Loss: 0.6982 | Val MAE: 0.6971 | Test MAE: 0.7461 | Time: 27.6074
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [25] Train Loss: 0.6974 | Train MAE: 0.6962 | Val Loss: 0.6981 | Val MAE: 0.6970 | Test MAE: 0.7486 | Time: 27.2387
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [26] Train Loss: 0.7246 | Train MAE: 0.7234 | Val Loss: 0.7478 | Val MAE: 0.7468 | Test MAE: 0.7946 | Time: 26.7832
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [27] Train Loss: 0.7215 | Train MAE: 0.7203 | Val Loss: 0.7142 | Val MAE: 0.7132 | Test MAE: 0.7623 | Time: 27.0344
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [28] Train Loss: 0.7082 | Train MAE: 0.7070 | Val Loss: 0.7038 | Val MAE: 0.7027 | Test MAE: 0.7433 | Time: 27.6236
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [29] Train Loss: 0.6818 | Train MAE: 0.6806 | Val Loss: 0.7180 | Val MAE: 0.7169 | Test MAE: 0.7604 | Time: 27.4053
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [30] Train Loss: 0.7278 | Train MAE: 0.7267 | Val Loss: 0.7010 | Val MAE: 0.6999 | Test MAE: 0.7475 | Time: 26.2799
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [31] Train Loss: 0.6789 | Train MAE: 0.6778 | Val Loss: 0.6955 | Val MAE: 0.6944 | Test MAE: 0.7465 | Time: 26.8915
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [32] Train Loss: 0.6986 | Train MAE: 0.6974 | Val Loss: 0.6806 | Val MAE: 0.6795 | Test MAE: 0.7533 | Time: 26.8216
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [33] Train Loss: 0.6932 | Train MAE: 0.6921 | Val Loss: 0.7167 | Val MAE: 0.7156 | Test MAE: 0.7597 | Time: 27.1971
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [34] Train Loss: 0.7026 | Train MAE: 0.7015 | Val Loss: 0.8240 | Val MAE: 0.8229 | Test MAE: 0.8436 | Time: 27.1918
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [35] Train Loss: 0.6874 | Train MAE: 0.6862 | Val Loss: 0.7730 | Val MAE: 0.7719 | Test MAE: 0.8097 | Time: 26.9930
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [36] Train Loss: 0.6781 | Train MAE: 0.6769 | Val Loss: 0.7646 | Val MAE: 0.7635 | Test MAE: 0.7907 | Time: 27.0135
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [37] Train Loss: 0.7093 | Train MAE: 0.7081 | Val Loss: 0.6761 | Val MAE: 0.6750 | Test MAE: 0.7363 | Time: 26.7848
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [38] Train Loss: 0.6760 | Train MAE: 0.6748 | Val Loss: 0.7354 | Val MAE: 0.7343 | Test MAE: 0.7725 | Time: 27.4133
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [39] Train Loss: 0.6823 | Train MAE: 0.6811 | Val Loss: 0.7280 | Val MAE: 0.7269 | Test MAE: 0.7824 | Time: 26.2156
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [40] Train Loss: 0.6875 | Train MAE: 0.6863 | Val Loss: 0.7800 | Val MAE: 0.7789 | Test MAE: 0.7976 | Time: 26.6594
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [41] Train Loss: 0.6617 | Train MAE: 0.6605 | Val Loss: 0.6555 | Val MAE: 0.6545 | Test MAE: 0.7107 | Time: 27.0699
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [42] Train Loss: 0.6643 | Train MAE: 0.6632 | Val Loss: 0.6626 | Val MAE: 0.6615 | Test MAE: 0.7115 | Time: 27.7157
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [43] Train Loss: 0.6651 | Train MAE: 0.6639 | Val Loss: 0.6924 | Val MAE: 0.6913 | Test MAE: 0.7333 | Time: 26.3738
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [44] Train Loss: 0.6771 | Train MAE: 0.6760 | Val Loss: 0.6682 | Val MAE: 0.6671 | Test MAE: 0.7167 | Time: 26.5679
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [45] Train Loss: 0.6598 | Train MAE: 0.6586 | Val Loss: 0.6594 | Val MAE: 0.6583 | Test MAE: 0.7173 | Time: 26.6425
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [46] Train Loss: 0.6754 | Train MAE: 0.6742 | Val Loss: 0.7279 | Val MAE: 0.7268 | Test MAE: 0.7644 | Time: 25.4504
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [47] Train Loss: 0.6833 | Train MAE: 0.6823 | Val Loss: 0.7264 | Val MAE: 0.7254 | Test MAE: 0.7652 | Time: 26.5716
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [48] Train Loss: 0.6520 | Train MAE: 0.6509 | Val Loss: 0.6907 | Val MAE: 0.6896 | Test MAE: 0.7287 | Time: 25.8513
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [49] Train Loss: 0.6924 | Train MAE: 0.6913 | Val Loss: 0.6816 | Val MAE: 0.6805 | Test MAE: 0.7246 | Time: 26.1033
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [50] Train Loss: 0.6501 | Train MAE: 0.6489 | Val Loss: 0.6543 | Val MAE: 0.6532 | Test MAE: 0.7119 | Time: 27.0186
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [51] Train Loss: 0.6454 | Train MAE: 0.6442 | Val Loss: 0.9977 | Val MAE: 0.9965 | Test MAE: 1.0181 | Time: 25.7472
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [52] Train Loss: 0.6679 | Train MAE: 0.6667 | Val Loss: 0.7453 | Val MAE: 0.7442 | Test MAE: 0.7821 | Time: 26.5963
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [53] Train Loss: 0.6604 | Train MAE: 0.6592 | Val Loss: 0.6898 | Val MAE: 0.6887 | Test MAE: 0.7386 | Time: 26.4699
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [54] Train Loss: 0.6577 | Train MAE: 0.6565 | Val Loss: 0.6672 | Val MAE: 0.6661 | Test MAE: 0.7172 | Time: 26.2411
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [55] Train Loss: 0.6850 | Train MAE: 0.6839 | Val Loss: 0.6794 | Val MAE: 0.6783 | Test MAE: 0.7328 | Time: 25.9795
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [56] Train Loss: 0.6879 | Train MAE: 0.6867 | Val Loss: 0.7126 | Val MAE: 0.7115 | Test MAE: 0.7683 | Time: 26.2176
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [57] Train Loss: 0.6890 | Train MAE: 0.6879 | Val Loss: 0.6512 | Val MAE: 0.6501 | Test MAE: 0.7051 | Time: 26.8414
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [58] Train Loss: 0.6739 | Train MAE: 0.6728 | Val Loss: 0.6691 | Val MAE: 0.6680 | Test MAE: 0.7232 | Time: 26.0247
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [59] Train Loss: 0.6684 | Train MAE: 0.6673 | Val Loss: 0.7564 | Val MAE: 0.7553 | Test MAE: 0.7809 | Time: 26.6574
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [60] Train Loss: 0.6522 | Train MAE: 0.6510 | Val Loss: 0.6811 | Val MAE: 0.6800 | Test MAE: 0.7218 | Time: 26.4566
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [61] Train Loss: 0.6602 | Train MAE: 0.6590 | Val Loss: 0.6815 | Val MAE: 0.6804 | Test MAE: 0.7351 | Time: 26.5729
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [62] Train Loss: 0.6554 | Train MAE: 0.6543 | Val Loss: 0.6997 | Val MAE: 0.6986 | Test MAE: 0.7442 | Time: 26.9069
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [63] Train Loss: 0.6728 | Train MAE: 0.6717 | Val Loss: 0.6991 | Val MAE: 0.6980 | Test MAE: 0.7363 | Time: 25.6346
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [64] Train Loss: 0.6624 | Train MAE: 0.6612 | Val Loss: 0.7042 | Val MAE: 0.7031 | Test MAE: 0.7365 | Time: 26.2604
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [65] Train Loss: 0.6460 | Train MAE: 0.6449 | Val Loss: 0.6625 | Val MAE: 0.6614 | Test MAE: 0.7047 | Time: 26.8321
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [66] Train Loss: 0.6393 | Train MAE: 0.6382 | Val Loss: 0.6576 | Val MAE: 0.6565 | Test MAE: 0.6972 | Time: 25.4969
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [67] Train Loss: 0.6401 | Train MAE: 0.6389 | Val Loss: 0.7019 | Val MAE: 0.7008 | Test MAE: 0.7480 | Time: 26.4848
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [68] Train Loss: 0.6318 | Train MAE: 0.6306 | Val Loss: 0.6668 | Val MAE: 0.6657 | Test MAE: 0.7115 | Time: 26.3943
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [69] Train Loss: 0.6395 | Train MAE: 0.6383 | Val Loss: 0.6599 | Val MAE: 0.6588 | Test MAE: 0.7052 | Time: 26.2790
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [70] Train Loss: 0.6280 | Train MAE: 0.6269 | Val Loss: 0.6466 | Val MAE: 0.6455 | Test MAE: 0.6877 | Time: 25.9473
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [71] Train Loss: 0.6478 | Train MAE: 0.6466 | Val Loss: 0.6677 | Val MAE: 0.6666 | Test MAE: 0.7083 | Time: 26.2121
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [72] Train Loss: 0.6374 | Train MAE: 0.6362 | Val Loss: 0.7626 | Val MAE: 0.7615 | Test MAE: 0.8109 | Time: 26.0071
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [73] Train Loss: 0.6654 | Train MAE: 0.6642 | Val Loss: 0.6900 | Val MAE: 0.6889 | Test MAE: 0.7245 | Time: 26.2179
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [74] Train Loss: 0.6410 | Train MAE: 0.6398 | Val Loss: 0.6848 | Val MAE: 0.6837 | Test MAE: 0.7167 | Time: 25.9122
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [75] Train Loss: 0.6299 | Train MAE: 0.6288 | Val Loss: 0.6730 | Val MAE: 0.6719 | Test MAE: 0.7105 | Time: 25.7567
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [76] Train Loss: 0.6276 | Train MAE: 0.6264 | Val Loss: 0.6638 | Val MAE: 0.6627 | Test MAE: 0.7084 | Time: 25.8576
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [77] Train Loss: 0.6302 | Train MAE: 0.6291 | Val Loss: 0.6762 | Val MAE: 0.6751 | Test MAE: 0.7097 | Time: 26.5289
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [78] Train Loss: 0.6256 | Train MAE: 0.6245 | Val Loss: 0.6446 | Val MAE: 0.6436 | Test MAE: 0.6878 | Time: 25.4298
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [79] Train Loss: 0.6251 | Train MAE: 0.6239 | Val Loss: 0.6591 | Val MAE: 0.6580 | Test MAE: 0.7008 | Time: 25.9868
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [80] Train Loss: 0.6348 | Train MAE: 0.6336 | Val Loss: 0.6437 | Val MAE: 0.6426 | Test MAE: 0.6879 | Time: 26.5162
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [81] Train Loss: 0.6306 | Train MAE: 0.6295 | Val Loss: 0.7759 | Val MAE: 0.7748 | Test MAE: 0.8095 | Time: 26.3408
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [82] Train Loss: 0.6393 | Train MAE: 0.6382 | Val Loss: 0.6587 | Val MAE: 0.6576 | Test MAE: 0.6821 | Time: 25.6264
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [83] Train Loss: 0.6136 | Train MAE: 0.6125 | Val Loss: 0.8127 | Val MAE: 0.8116 | Test MAE: 0.8340 | Time: 25.9472
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [84] Train Loss: 0.6571 | Train MAE: 0.6560 | Val Loss: 0.7021 | Val MAE: 0.7010 | Test MAE: 0.7344 | Time: 26.0729
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [85] Train Loss: 0.6279 | Train MAE: 0.6267 | Val Loss: 0.7467 | Val MAE: 0.7457 | Test MAE: 0.7860 | Time: 25.8654
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [86] Train Loss: 0.6243 | Train MAE: 0.6232 | Val Loss: 0.6329 | Val MAE: 0.6318 | Test MAE: 0.6768 | Time: 25.2953
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [87] Train Loss: 0.6263 | Train MAE: 0.6251 | Val Loss: 0.7189 | Val MAE: 0.7178 | Test MAE: 0.7340 | Time: 25.5107
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [88] Train Loss: 0.6067 | Train MAE: 0.6056 | Val Loss: 0.8249 | Val MAE: 0.8238 | Test MAE: 0.8483 | Time: 25.9646
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [89] Train Loss: 0.6163 | Train MAE: 0.6152 | Val Loss: 0.6456 | Val MAE: 0.6444 | Test MAE: 0.6905 | Time: 26.3817
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [90] Train Loss: 0.6074 | Train MAE: 0.6063 | Val Loss: 0.6496 | Val MAE: 0.6484 | Test MAE: 0.6950 | Time: 25.9055
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [91] Train Loss: 0.6082 | Train MAE: 0.6070 | Val Loss: 0.6335 | Val MAE: 0.6324 | Test MAE: 0.6803 | Time: 26.7980
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [92] Train Loss: 0.6034 | Train MAE: 0.6022 | Val Loss: 0.6604 | Val MAE: 0.6593 | Test MAE: 0.6979 | Time: 25.6826
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [93] Train Loss: 0.6001 | Train MAE: 0.5989 | Val Loss: 0.6352 | Val MAE: 0.6340 | Test MAE: 0.6832 | Time: 26.6494
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [94] Train Loss: 0.6015 | Train MAE: 0.6003 | Val Loss: 0.6202 | Val MAE: 0.6190 | Test MAE: 0.6643 | Time: 26.7401
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [95] Train Loss: 0.6062 | Train MAE: 0.6050 | Val Loss: 0.6136 | Val MAE: 0.6125 | Test MAE: 0.6643 | Time: 26.8377
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [96] Train Loss: 0.5843 | Train MAE: 0.5831 | Val Loss: 0.6019 | Val MAE: 0.6008 | Test MAE: 0.6471 | Time: 26.3093
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [97] Train Loss: 0.5843 | Train MAE: 0.5831 | Val Loss: 0.6225 | Val MAE: 0.6213 | Test MAE: 0.6689 | Time: 26.0433
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [98] Train Loss: 0.6042 | Train MAE: 0.6030 | Val Loss: 0.6130 | Val MAE: 0.6119 | Test MAE: 0.6792 | Time: 25.6698
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [99] Train Loss: 0.5861 | Train MAE: 0.5849 | Val Loss: 0.6356 | Val MAE: 0.6344 | Test MAE: 0.6830 | Time: 26.9726
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [100] Train Loss: 0.5778 | Train MAE: 0.5766 | Val Loss: 0.6972 | Val MAE: 0.6961 | Test MAE: 0.7198 | Time: 26.8934
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [101] Train Loss: 0.5818 | Train MAE: 0.5806 | Val Loss: 0.6715 | Val MAE: 0.6703 | Test MAE: 0.7071 | Time: 27.3721
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [102] Train Loss: 0.5921 | Train MAE: 0.5909 | Val Loss: 0.5986 | Val MAE: 0.5974 | Test MAE: 0.6565 | Time: 27.0665
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [103] Train Loss: 0.5698 | Train MAE: 0.5686 | Val Loss: 0.5897 | Val MAE: 0.5886 | Test MAE: 0.6596 | Time: 26.2467
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [104] Train Loss: 0.5752 | Train MAE: 0.5740 | Val Loss: 0.6222 | Val MAE: 0.6210 | Test MAE: 0.6714 | Time: 26.6256
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [105] Train Loss: 0.5614 | Train MAE: 0.5602 | Val Loss: 0.5793 | Val MAE: 0.5781 | Test MAE: 0.6365 | Time: 26.7368
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [106] Train Loss: 0.5875 | Train MAE: 0.5863 | Val Loss: 0.6385 | Val MAE: 0.6374 | Test MAE: 0.6861 | Time: 27.1184
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [107] Train Loss: 0.5630 | Train MAE: 0.5617 | Val Loss: 0.5807 | Val MAE: 0.5796 | Test MAE: 0.6389 | Time: 27.4079
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [108] Train Loss: 0.5380 | Train MAE: 0.5368 | Val Loss: 0.5649 | Val MAE: 0.5638 | Test MAE: 0.6184 | Time: 27.4619
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [109] Train Loss: 0.5532 | Train MAE: 0.5520 | Val Loss: 0.5986 | Val MAE: 0.5974 | Test MAE: 0.6451 | Time: 26.1009
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [110] Train Loss: 0.5607 | Train MAE: 0.5595 | Val Loss: 0.5967 | Val MAE: 0.5956 | Test MAE: 0.6392 | Time: 26.4968
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [111] Train Loss: 0.5413 | Train MAE: 0.5401 | Val Loss: 0.6288 | Val MAE: 0.6276 | Test MAE: 0.6659 | Time: 26.9860
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [112] Train Loss: 0.5392 | Train MAE: 0.5381 | Val Loss: 0.5461 | Val MAE: 0.5450 | Test MAE: 0.5958 | Time: 25.7709
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [113] Train Loss: 0.5436 | Train MAE: 0.5424 | Val Loss: 0.5954 | Val MAE: 0.5943 | Test MAE: 0.6326 | Time: 27.4966
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [114] Train Loss: 0.5352 | Train MAE: 0.5340 | Val Loss: 0.5761 | Val MAE: 0.5749 | Test MAE: 0.6220 | Time: 27.1838
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [115] Train Loss: 0.5320 | Train MAE: 0.5308 | Val Loss: 0.5726 | Val MAE: 0.5715 | Test MAE: 0.6226 | Time: 27.6485
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [116] Train Loss: 0.5545 | Train MAE: 0.5533 | Val Loss: 0.6886 | Val MAE: 0.6874 | Test MAE: 0.7262 | Time: 27.1806
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [117] Train Loss: 0.5276 | Train MAE: 0.5264 | Val Loss: 0.5857 | Val MAE: 0.5846 | Test MAE: 0.6324 | Time: 26.4505
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [118] Train Loss: 0.5512 | Train MAE: 0.5500 | Val Loss: 0.5611 | Val MAE: 0.5599 | Test MAE: 0.6107 | Time: 26.5177
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [119] Train Loss: 0.5539 | Train MAE: 0.5527 | Val Loss: 0.5642 | Val MAE: 0.5631 | Test MAE: 0.6068 | Time: 26.5209
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [120] Train Loss: 0.5254 | Train MAE: 0.5241 | Val Loss: 0.5683 | Val MAE: 0.5671 | Test MAE: 0.6139 | Time: 26.6917
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [121] Train Loss: 0.5414 | Train MAE: 0.5402 | Val Loss: 0.6191 | Val MAE: 0.6180 | Test MAE: 0.6546 | Time: 26.4723
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [122] Train Loss: 0.5120 | Train MAE: 0.5108 | Val Loss: 0.5514 | Val MAE: 0.5503 | Test MAE: 0.5991 | Time: 26.3870
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [123] Train Loss: 0.5136 | Train MAE: 0.5124 | Val Loss: 0.8018 | Val MAE: 0.8006 | Test MAE: 0.8412 | Time: 26.8314
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [124] Train Loss: 0.5293 | Train MAE: 0.5281 | Val Loss: 0.5376 | Val MAE: 0.5365 | Test MAE: 0.5957 | Time: 26.9378
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [125] Train Loss: 0.5052 | Train MAE: 0.5040 | Val Loss: 0.5253 | Val MAE: 0.5242 | Test MAE: 0.5733 | Time: 26.7307
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [126] Train Loss: 0.5063 | Train MAE: 0.5051 | Val Loss: 0.5611 | Val MAE: 0.5599 | Test MAE: 0.5994 | Time: 26.0253
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [127] Train Loss: 0.4961 | Train MAE: 0.4949 | Val Loss: 0.5366 | Val MAE: 0.5355 | Test MAE: 0.5964 | Time: 26.6661
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [128] Train Loss: 0.4989 | Train MAE: 0.4977 | Val Loss: 0.5226 | Val MAE: 0.5215 | Test MAE: 0.5657 | Time: 26.0334
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [129] Train Loss: 0.5156 | Train MAE: 0.5144 | Val Loss: 0.5682 | Val MAE: 0.5671 | Test MAE: 0.5970 | Time: 25.9722
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [130] Train Loss: 0.4974 | Train MAE: 0.4962 | Val Loss: 0.5500 | Val MAE: 0.5488 | Test MAE: 0.5864 | Time: 25.1785
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [131] Train Loss: 0.5022 | Train MAE: 0.5010 | Val Loss: 0.5690 | Val MAE: 0.5678 | Test MAE: 0.6044 | Time: 26.2226
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [132] Train Loss: 0.4974 | Train MAE: 0.4962 | Val Loss: 0.5791 | Val MAE: 0.5780 | Test MAE: 0.6008 | Time: 25.9256
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [133] Train Loss: 0.4960 | Train MAE: 0.4948 | Val Loss: 0.5905 | Val MAE: 0.5893 | Test MAE: 0.6309 | Time: 27.3311
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [134] Train Loss: 0.4838 | Train MAE: 0.4826 | Val Loss: 0.5622 | Val MAE: 0.5611 | Test MAE: 0.5993 | Time: 25.4840
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [135] Train Loss: 0.5020 | Train MAE: 0.5008 | Val Loss: 0.5349 | Val MAE: 0.5338 | Test MAE: 0.5768 | Time: 25.9601
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [136] Train Loss: 0.4986 | Train MAE: 0.4974 | Val Loss: 0.5890 | Val MAE: 0.5878 | Test MAE: 0.6189 | Time: 26.5912
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [137] Train Loss: 0.4804 | Train MAE: 0.4792 | Val Loss: 0.5765 | Val MAE: 0.5754 | Test MAE: 0.6074 | Time: 25.5329
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [138] Train Loss: 0.4768 | Train MAE: 0.4756 | Val Loss: 0.5287 | Val MAE: 0.5276 | Test MAE: 0.5657 | Time: 26.1826
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [139] Train Loss: 0.4680 | Train MAE: 0.4668 | Val Loss: 0.6703 | Val MAE: 0.6692 | Test MAE: 0.6859 | Time: 26.2689
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [140] Train Loss: 0.4928 | Train MAE: 0.4916 | Val Loss: 0.5343 | Val MAE: 0.5331 | Test MAE: 0.5755 | Time: 25.9457
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [141] Train Loss: 0.4975 | Train MAE: 0.4963 | Val Loss: 0.6357 | Val MAE: 0.6346 | Test MAE: 0.6611 | Time: 26.7224
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [142] Train Loss: 0.4729 | Train MAE: 0.4717 | Val Loss: 0.5757 | Val MAE: 0.5746 | Test MAE: 0.6128 | Time: 26.9245
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [143] Train Loss: 0.4629 | Train MAE: 0.4617 | Val Loss: 0.5727 | Val MAE: 0.5715 | Test MAE: 0.5898 | Time: 26.6818
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [144] Train Loss: 0.4675 | Train MAE: 0.4662 | Val Loss: 0.5912 | Val MAE: 0.5901 | Test MAE: 0.6241 | Time: 25.3899
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [145] Train Loss: 0.4701 | Train MAE: 0.4689 | Val Loss: 0.5143 | Val MAE: 0.5131 | Test MAE: 0.5552 | Time: 26.2366
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [146] Train Loss: 0.4701 | Train MAE: 0.4688 | Val Loss: 0.5415 | Val MAE: 0.5403 | Test MAE: 0.5917 | Time: 26.7231
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [147] Train Loss: 0.4653 | Train MAE: 0.4641 | Val Loss: 0.6088 | Val MAE: 0.6077 | Test MAE: 0.6455 | Time: 25.3710
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [148] Train Loss: 0.4608 | Train MAE: 0.4596 | Val Loss: 0.4982 | Val MAE: 0.4971 | Test MAE: 0.5409 | Time: 26.3075
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [149] Train Loss: 0.4470 | Train MAE: 0.4458 | Val Loss: 0.5056 | Val MAE: 0.5045 | Test MAE: 0.5445 | Time: 25.9104
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [150] Train Loss: 0.4565 | Train MAE: 0.4553 | Val Loss: 0.5740 | Val MAE: 0.5729 | Test MAE: 0.6093 | Time: 26.5821
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [151] Train Loss: 0.4439 | Train MAE: 0.4427 | Val Loss: 0.5202 | Val MAE: 0.5190 | Test MAE: 0.5580 | Time: 26.0835
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [152] Train Loss: 0.4646 | Train MAE: 0.4634 | Val Loss: 0.5210 | Val MAE: 0.5198 | Test MAE: 0.5671 | Time: 25.4962
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [153] Train Loss: 0.4676 | Train MAE: 0.4664 | Val Loss: 0.6269 | Val MAE: 0.6258 | Test MAE: 0.6349 | Time: 25.7959
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [154] Train Loss: 0.4562 | Train MAE: 0.4550 | Val Loss: 0.4913 | Val MAE: 0.4902 | Test MAE: 0.5254 | Time: 26.0044
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [155] Train Loss: 0.4553 | Train MAE: 0.4541 | Val Loss: 0.5136 | Val MAE: 0.5125 | Test MAE: 0.5485 | Time: 26.2483
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [156] Train Loss: 0.4489 | Train MAE: 0.4478 | Val Loss: 0.5387 | Val MAE: 0.5376 | Test MAE: 0.5782 | Time: 25.1302
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [157] Train Loss: 0.4501 | Train MAE: 0.4489 | Val Loss: 0.6294 | Val MAE: 0.6283 | Test MAE: 0.6385 | Time: 26.1620
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [158] Train Loss: 0.4555 | Train MAE: 0.4543 | Val Loss: 0.5138 | Val MAE: 0.5126 | Test MAE: 0.5388 | Time: 26.6708
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [159] Train Loss: 0.4293 | Train MAE: 0.4281 | Val Loss: 0.5017 | Val MAE: 0.5006 | Test MAE: 0.5324 | Time: 25.3636
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [160] Train Loss: 0.4351 | Train MAE: 0.4339 | Val Loss: 0.4839 | Val MAE: 0.4828 | Test MAE: 0.5208 | Time: 25.8696
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [161] Train Loss: 0.4192 | Train MAE: 0.4180 | Val Loss: 0.5049 | Val MAE: 0.5038 | Test MAE: 0.5403 | Time: 26.4356
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [162] Train Loss: 0.4323 | Train MAE: 0.4311 | Val Loss: 0.6258 | Val MAE: 0.6246 | Test MAE: 0.6387 | Time: 26.2494
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [163] Train Loss: 0.4463 | Train MAE: 0.4451 | Val Loss: 0.5522 | Val MAE: 0.5510 | Test MAE: 0.5747 | Time: 25.5968
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [164] Train Loss: 0.4635 | Train MAE: 0.4623 | Val Loss: 0.5959 | Val MAE: 0.5947 | Test MAE: 0.6277 | Time: 25.9129
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [165] Train Loss: 0.4520 | Train MAE: 0.4508 | Val Loss: 0.5492 | Val MAE: 0.5481 | Test MAE: 0.5598 | Time: 25.9676
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [166] Train Loss: 0.4662 | Train MAE: 0.4650 | Val Loss: 0.4951 | Val MAE: 0.4940 | Test MAE: 0.5237 | Time: 26.3724
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [167] Train Loss: 0.4348 | Train MAE: 0.4336 | Val Loss: 0.5195 | Val MAE: 0.5184 | Test MAE: 0.5480 | Time: 26.4859
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [168] Train Loss: 0.4406 | Train MAE: 0.4394 | Val Loss: 0.4809 | Val MAE: 0.4798 | Test MAE: 0.5244 | Time: 25.3728
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [169] Train Loss: 0.4444 | Train MAE: 0.4432 | Val Loss: 0.4806 | Val MAE: 0.4795 | Test MAE: 0.5172 | Time: 26.1369
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [170] Train Loss: 0.4304 | Train MAE: 0.4292 | Val Loss: 0.4943 | Val MAE: 0.4932 | Test MAE: 0.5222 | Time: 26.6138
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [171] Train Loss: 0.4470 | Train MAE: 0.4458 | Val Loss: 0.5020 | Val MAE: 0.5009 | Test MAE: 0.5343 | Time: 26.7485
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [172] Train Loss: 0.4297 | Train MAE: 0.4285 | Val Loss: 0.4976 | Val MAE: 0.4964 | Test MAE: 0.5264 | Time: 25.5520
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [173] Train Loss: 0.4388 | Train MAE: 0.4376 | Val Loss: 0.6293 | Val MAE: 0.6282 | Test MAE: 0.6470 | Time: 25.9346
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [174] Train Loss: 0.4189 | Train MAE: 0.4177 | Val Loss: 0.5006 | Val MAE: 0.4995 | Test MAE: 0.5292 | Time: 26.5418
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [175] Train Loss: 0.4322 | Train MAE: 0.4310 | Val Loss: 0.4739 | Val MAE: 0.4728 | Test MAE: 0.5037 | Time: 26.6697
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [176] Train Loss: 0.4403 | Train MAE: 0.4391 | Val Loss: 0.4782 | Val MAE: 0.4771 | Test MAE: 0.5111 | Time: 25.8101
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [177] Train Loss: 0.4321 | Train MAE: 0.4309 | Val Loss: 0.6327 | Val MAE: 0.6316 | Test MAE: 0.6432 | Time: 26.4261
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [178] Train Loss: 0.4429 | Train MAE: 0.4417 | Val Loss: 0.4979 | Val MAE: 0.4967 | Test MAE: 0.5331 | Time: 26.6933
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [179] Train Loss: 0.4283 | Train MAE: 0.4271 | Val Loss: 0.5009 | Val MAE: 0.4998 | Test MAE: 0.5397 | Time: 25.5243
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [180] Train Loss: 0.4115 | Train MAE: 0.4104 | Val Loss: 0.4979 | Val MAE: 0.4967 | Test MAE: 0.5295 | Time: 26.1420
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [181] Train Loss: 0.4358 | Train MAE: 0.4346 | Val Loss: 0.5025 | Val MAE: 0.5014 | Test MAE: 0.5310 | Time: 26.7279
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [182] Train Loss: 0.4226 | Train MAE: 0.4214 | Val Loss: 0.4817 | Val MAE: 0.4806 | Test MAE: 0.5189 | Time: 27.0653
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [183] Train Loss: 0.4274 | Train MAE: 0.4262 | Val Loss: 0.5545 | Val MAE: 0.5533 | Test MAE: 0.5648 | Time: 26.0367
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [184] Train Loss: 0.4386 | Train MAE: 0.4374 | Val Loss: 0.4913 | Val MAE: 0.4902 | Test MAE: 0.5194 | Time: 26.1366
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [185] Train Loss: 0.4160 | Train MAE: 0.4148 | Val Loss: 0.5262 | Val MAE: 0.5250 | Test MAE: 0.5649 | Time: 26.1556
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [186] Train Loss: 0.4155 | Train MAE: 0.4143 | Val Loss: 0.5233 | Val MAE: 0.5221 | Test MAE: 0.5439 | Time: 26.5602
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [187] Train Loss: 0.4090 | Train MAE: 0.4078 | Val Loss: 0.4631 | Val MAE: 0.4620 | Test MAE: 0.5078 | Time: 25.2910
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [188] Train Loss: 0.4017 | Train MAE: 0.4005 | Val Loss: 0.6675 | Val MAE: 0.6664 | Test MAE: 0.6723 | Time: 26.0865
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [189] Train Loss: 0.4265 | Train MAE: 0.4253 | Val Loss: 0.5285 | Val MAE: 0.5273 | Test MAE: 0.5574 | Time: 26.0855
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [190] Train Loss: 0.3910 | Train MAE: 0.3898 | Val Loss: 0.4750 | Val MAE: 0.4738 | Test MAE: 0.5111 | Time: 26.4910
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [191] Train Loss: 0.3950 | Train MAE: 0.3938 | Val Loss: 0.4774 | Val MAE: 0.4762 | Test MAE: 0.5092 | Time: 25.8855
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [192] Train Loss: 0.3897 | Train MAE: 0.3885 | Val Loss: 0.5236 | Val MAE: 0.5225 | Test MAE: 0.5516 | Time: 25.0624
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [193] Train Loss: 0.4007 | Train MAE: 0.3995 | Val Loss: 0.4713 | Val MAE: 0.4701 | Test MAE: 0.5110 | Time: 25.2588
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [194] Train Loss: 0.3874 | Train MAE: 0.3862 | Val Loss: 0.4808 | Val MAE: 0.4796 | Test MAE: 0.5030 | Time: 27.0361
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [195] Train Loss: 0.3866 | Train MAE: 0.3854 | Val Loss: 0.4863 | Val MAE: 0.4851 | Test MAE: 0.5192 | Time: 25.9669
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [196] Train Loss: 0.3937 | Train MAE: 0.3925 | Val Loss: 0.5376 | Val MAE: 0.5365 | Test MAE: 0.5655 | Time: 27.1653
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [197] Train Loss: 0.4046 | Train MAE: 0.4034 | Val Loss: 0.5346 | Val MAE: 0.5335 | Test MAE: 0.5388 | Time: 25.6154
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [198] Train Loss: 0.4112 | Train MAE: 0.4100 | Val Loss: 0.4618 | Val MAE: 0.4607 | Test MAE: 0.4939 | Time: 26.0145
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [199] Train Loss: 0.4439 | Train MAE: 0.4427 | Val Loss: 0.4939 | Val MAE: 0.4928 | Test MAE: 0.5187 | Time: 26.8388
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [200] Train Loss: 0.3951 | Train MAE: 0.3939 | Val Loss: 0.5275 | Val MAE: 0.5263 | Test MAE: 0.5456 | Time: 26.3175
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [201] Train Loss: 0.3989 | Train MAE: 0.3977 | Val Loss: 0.5723 | Val MAE: 0.5711 | Test MAE: 0.6025 | Time: 25.4511
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [202] Train Loss: 0.4266 | Train MAE: 0.4254 | Val Loss: 0.4768 | Val MAE: 0.4756 | Test MAE: 0.5065 | Time: 25.9897
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [203] Train Loss: 0.4151 | Train MAE: 0.4139 | Val Loss: 0.4599 | Val MAE: 0.4587 | Test MAE: 0.5059 | Time: 26.2485
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [204] Train Loss: 0.3891 | Train MAE: 0.3879 | Val Loss: 0.6226 | Val MAE: 0.6215 | Test MAE: 0.6409 | Time: 26.7071
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [205] Train Loss: 0.4034 | Train MAE: 0.4022 | Val Loss: 0.4625 | Val MAE: 0.4614 | Test MAE: 0.4949 | Time: 25.4799
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [206] Train Loss: 0.3790 | Train MAE: 0.3778 | Val Loss: 0.5049 | Val MAE: 0.5038 | Test MAE: 0.5317 | Time: 25.9210
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [207] Train Loss: 0.3845 | Train MAE: 0.3833 | Val Loss: 0.4691 | Val MAE: 0.4680 | Test MAE: 0.4975 | Time: 26.1125
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [208] Train Loss: 0.3908 | Train MAE: 0.3896 | Val Loss: 0.4955 | Val MAE: 0.4944 | Test MAE: 0.5223 | Time: 26.2119
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [209] Train Loss: 0.3833 | Train MAE: 0.3821 | Val Loss: 0.5412 | Val MAE: 0.5400 | Test MAE: 0.5600 | Time: 25.8995
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [210] Train Loss: 0.3986 | Train MAE: 0.3974 | Val Loss: 0.4684 | Val MAE: 0.4673 | Test MAE: 0.5065 | Time: 25.3665
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [211] Train Loss: 0.4034 | Train MAE: 0.4022 | Val Loss: 0.5431 | Val MAE: 0.5419 | Test MAE: 0.5732 | Time: 26.5700
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [212] Train Loss: 0.4013 | Train MAE: 0.4001 | Val Loss: 0.4591 | Val MAE: 0.4580 | Test MAE: 0.4977 | Time: 26.2033
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [213] Train Loss: 0.3934 | Train MAE: 0.3922 | Val Loss: 0.5145 | Val MAE: 0.5134 | Test MAE: 0.5410 | Time: 26.0651
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [214] Train Loss: 0.3921 | Train MAE: 0.3909 | Val Loss: 0.5188 | Val MAE: 0.5177 | Test MAE: 0.5563 | Time: 26.6956
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [215] Train Loss: 0.3828 | Train MAE: 0.3816 | Val Loss: 0.5187 | Val MAE: 0.5176 | Test MAE: 0.5388 | Time: 26.1178
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [216] Train Loss: 0.4024 | Train MAE: 0.4012 | Val Loss: 0.5384 | Val MAE: 0.5373 | Test MAE: 0.5581 | Time: 26.0419
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [217] Train Loss: 0.3888 | Train MAE: 0.3876 | Val Loss: 0.4547 | Val MAE: 0.4535 | Test MAE: 0.4823 | Time: 26.7021
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [218] Train Loss: 0.3777 | Train MAE: 0.3765 | Val Loss: 0.4927 | Val MAE: 0.4916 | Test MAE: 0.5235 | Time: 25.5696
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [219] Train Loss: 0.3906 | Train MAE: 0.3894 | Val Loss: 0.4610 | Val MAE: 0.4598 | Test MAE: 0.4966 | Time: 26.5663
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [220] Train Loss: 0.3806 | Train MAE: 0.3794 | Val Loss: 0.4546 | Val MAE: 0.4535 | Test MAE: 0.4865 | Time: 26.9338
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [221] Train Loss: 0.3680 | Train MAE: 0.3668 | Val Loss: 0.5295 | Val MAE: 0.5284 | Test MAE: 0.5536 | Time: 25.9884
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [222] Train Loss: 0.3890 | Train MAE: 0.3878 | Val Loss: 0.4948 | Val MAE: 0.4937 | Test MAE: 0.5246 | Time: 26.2643
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [223] Train Loss: 0.3922 | Train MAE: 0.3910 | Val Loss: 0.5286 | Val MAE: 0.5274 | Test MAE: 0.5564 | Time: 26.6496
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [224] Train Loss: 0.3918 | Train MAE: 0.3905 | Val Loss: 0.4562 | Val MAE: 0.4550 | Test MAE: 0.4858 | Time: 26.8059
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [225] Train Loss: 0.3797 | Train MAE: 0.3785 | Val Loss: 0.4729 | Val MAE: 0.4718 | Test MAE: 0.5124 | Time: 26.1347
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [226] Train Loss: 0.3654 | Train MAE: 0.3642 | Val Loss: 0.4821 | Val MAE: 0.4810 | Test MAE: 0.5215 | Time: 26.2693
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [227] Train Loss: 0.3757 | Train MAE: 0.3745 | Val Loss: 0.5010 | Val MAE: 0.4999 | Test MAE: 0.5225 | Time: 26.6686
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [228] Train Loss: 0.3901 | Train MAE: 0.3889 | Val Loss: 0.4676 | Val MAE: 0.4665 | Test MAE: 0.5047 | Time: 26.9667
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [229] Train Loss: 0.3740 | Train MAE: 0.3728 | Val Loss: 0.5025 | Val MAE: 0.5014 | Test MAE: 0.5421 | Time: 26.0079
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [230] Train Loss: 0.3953 | Train MAE: 0.3941 | Val Loss: 0.4592 | Val MAE: 0.4580 | Test MAE: 0.5001 | Time: 26.2522
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [231] Train Loss: 0.3871 | Train MAE: 0.3859 | Val Loss: 0.5458 | Val MAE: 0.5447 | Test MAE: 0.5724 | Time: 26.7126
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [232] Train Loss: 0.3659 | Train MAE: 0.3647 | Val Loss: 0.5247 | Val MAE: 0.5236 | Test MAE: 0.5722 | Time: 26.0579
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [233] Train Loss: 0.3692 | Train MAE: 0.3680 | Val Loss: 0.4823 | Val MAE: 0.4812 | Test MAE: 0.5168 | Time: 26.4004
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [234] Train Loss: 0.3626 | Train MAE: 0.3614 | Val Loss: 0.4797 | Val MAE: 0.4786 | Test MAE: 0.5040 | Time: 26.8373
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [235] Train Loss: 0.3601 | Train MAE: 0.3589 | Val Loss: 0.4855 | Val MAE: 0.4844 | Test MAE: 0.5253 | Time: 25.2444
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [236] Train Loss: 0.3624 | Train MAE: 0.3612 | Val Loss: 0.4491 | Val MAE: 0.4480 | Test MAE: 0.4889 | Time: 25.8099
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [237] Train Loss: 0.3610 | Train MAE: 0.3597 | Val Loss: 0.4597 | Val MAE: 0.4586 | Test MAE: 0.4916 | Time: 26.1100
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [238] Train Loss: 0.3605 | Train MAE: 0.3593 | Val Loss: 0.4563 | Val MAE: 0.4551 | Test MAE: 0.4785 | Time: 25.1796
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [239] Train Loss: 0.3677 | Train MAE: 0.3665 | Val Loss: 0.5201 | Val MAE: 0.5190 | Test MAE: 0.5549 | Time: 27.0058
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [240] Train Loss: 0.3743 | Train MAE: 0.3731 | Val Loss: 0.5324 | Val MAE: 0.5313 | Test MAE: 0.5525 | Time: 25.6586
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [241] Train Loss: 0.3638 | Train MAE: 0.3626 | Val Loss: 0.4757 | Val MAE: 0.4746 | Test MAE: 0.5180 | Time: 26.5097
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [242] Train Loss: 0.3612 | Train MAE: 0.3600 | Val Loss: 0.4763 | Val MAE: 0.4751 | Test MAE: 0.4984 | Time: 26.6569
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [243] Train Loss: 0.3575 | Train MAE: 0.3563 | Val Loss: 0.4630 | Val MAE: 0.4619 | Test MAE: 0.4923 | Time: 25.5702
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [244] Train Loss: 0.3733 | Train MAE: 0.3721 | Val Loss: 0.4821 | Val MAE: 0.4809 | Test MAE: 0.5074 | Time: 26.1392
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [245] Train Loss: 0.3673 | Train MAE: 0.3660 | Val Loss: 0.4575 | Val MAE: 0.4563 | Test MAE: 0.4954 | Time: 26.0276
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [246] Train Loss: 0.3509 | Train MAE: 0.3497 | Val Loss: 0.4793 | Val MAE: 0.4782 | Test MAE: 0.5196 | Time: 26.3857
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [247] Train Loss: 0.3978 | Train MAE: 0.3965 | Val Loss: 0.5871 | Val MAE: 0.5859 | Test MAE: 0.5975 | Time: 26.8721
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [248] Train Loss: 0.3655 | Train MAE: 0.3643 | Val Loss: 0.5477 | Val MAE: 0.5465 | Test MAE: 0.5574 | Time: 26.8049
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [249] Train Loss: 0.3708 | Train MAE: 0.3696 | Val Loss: 0.5120 | Val MAE: 0.5108 | Test MAE: 0.5360 | Time: 26.2356
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [250] Train Loss: 0.3567 | Train MAE: 0.3554 | Val Loss: 0.4777 | Val MAE: 0.4766 | Test MAE: 0.5030 | Time: 25.6051
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [251] Train Loss: 0.3673 | Train MAE: 0.3661 | Val Loss: 0.4836 | Val MAE: 0.4825 | Test MAE: 0.5059 | Time: 25.8725
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [252] Train Loss: 0.3342 | Train MAE: 0.3330 | Val Loss: 0.4489 | Val MAE: 0.4478 | Test MAE: 0.4757 | Time: 26.8273
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [253] Train Loss: 0.3534 | Train MAE: 0.3522 | Val Loss: 0.5506 | Val MAE: 0.5495 | Test MAE: 0.5540 | Time: 26.5923
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [254] Train Loss: 0.4029 | Train MAE: 0.4017 | Val Loss: 0.4894 | Val MAE: 0.4883 | Test MAE: 0.5084 | Time: 26.9515
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [255] Train Loss: 0.3811 | Train MAE: 0.3799 | Val Loss: 0.6602 | Val MAE: 0.6591 | Test MAE: 0.6934 | Time: 25.8008
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [256] Train Loss: 0.3836 | Train MAE: 0.3824 | Val Loss: 0.5197 | Val MAE: 0.5186 | Test MAE: 0.5514 | Time: 25.8965
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [257] Train Loss: 0.3694 | Train MAE: 0.3682 | Val Loss: 0.4650 | Val MAE: 0.4639 | Test MAE: 0.4871 | Time: 26.6611
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [258] Train Loss: 0.3773 | Train MAE: 0.3761 | Val Loss: 0.4577 | Val MAE: 0.4566 | Test MAE: 0.4844 | Time: 25.5709
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [259] Train Loss: 0.3590 | Train MAE: 0.3578 | Val Loss: 0.5493 | Val MAE: 0.5482 | Test MAE: 0.5695 | Time: 26.3768
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [260] Train Loss: 0.3485 | Train MAE: 0.3473 | Val Loss: 0.4555 | Val MAE: 0.4543 | Test MAE: 0.4884 | Time: 26.6428
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [261] Train Loss: 0.3438 | Train MAE: 0.3426 | Val Loss: 0.4644 | Val MAE: 0.4633 | Test MAE: 0.4885 | Time: 26.3261
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [262] Train Loss: 0.3505 | Train MAE: 0.3493 | Val Loss: 0.4856 | Val MAE: 0.4845 | Test MAE: 0.5100 | Time: 25.7039
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [263] Train Loss: 0.3665 | Train MAE: 0.3653 | Val Loss: 0.4807 | Val MAE: 0.4796 | Test MAE: 0.5039 | Time: 26.1844
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [264] Train Loss: 0.3539 | Train MAE: 0.3527 | Val Loss: 0.4607 | Val MAE: 0.4596 | Test MAE: 0.4840 | Time: 26.3633
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [265] Train Loss: 0.3438 | Train MAE: 0.3426 | Val Loss: 0.4747 | Val MAE: 0.4735 | Test MAE: 0.5059 | Time: 27.6392
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [266] Train Loss: 0.3409 | Train MAE: 0.3397 | Val Loss: 0.5353 | Val MAE: 0.5342 | Test MAE: 0.5575 | Time: 25.7552
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [267] Train Loss: 0.3481 | Train MAE: 0.3469 | Val Loss: 0.4571 | Val MAE: 0.4559 | Test MAE: 0.4964 | Time: 26.0914
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [268] Train Loss: 0.3479 | Train MAE: 0.3467 | Val Loss: 0.5046 | Val MAE: 0.5035 | Test MAE: 0.5155 | Time: 26.6160
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [269] Train Loss: 0.3550 | Train MAE: 0.3538 | Val Loss: 0.4909 | Val MAE: 0.4897 | Test MAE: 0.5187 | Time: 26.5693
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [270] Train Loss: 0.3646 | Train MAE: 0.3634 | Val Loss: 0.4635 | Val MAE: 0.4623 | Test MAE: 0.4848 | Time: 26.2148
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [271] Train Loss: 0.3713 | Train MAE: 0.3701 | Val Loss: 0.4520 | Val MAE: 0.4509 | Test MAE: 0.4752 | Time: 26.0759
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [272] Train Loss: 0.3834 | Train MAE: 0.3822 | Val Loss: 0.5419 | Val MAE: 0.5407 | Test MAE: 0.5639 | Time: 26.3803
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [273] Train Loss: 0.3572 | Train MAE: 0.3560 | Val Loss: 0.4618 | Val MAE: 0.4607 | Test MAE: 0.4710 | Time: 25.8620
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [274] Train Loss: 0.3555 | Train MAE: 0.3543 | Val Loss: 0.4438 | Val MAE: 0.4426 | Test MAE: 0.4758 | Time: 26.7067
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [275] Train Loss: 0.3541 | Train MAE: 0.3529 | Val Loss: 0.5340 | Val MAE: 0.5328 | Test MAE: 0.5685 | Time: 26.5215
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [276] Train Loss: 0.3461 | Train MAE: 0.3449 | Val Loss: 0.4324 | Val MAE: 0.4313 | Test MAE: 0.4694 | Time: 26.5667
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [277] Train Loss: 0.3377 | Train MAE: 0.3365 | Val Loss: 0.4402 | Val MAE: 0.4391 | Test MAE: 0.4753 | Time: 26.2723
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [278] Train Loss: 0.3523 | Train MAE: 0.3511 | Val Loss: 0.5029 | Val MAE: 0.5017 | Test MAE: 0.5293 | Time: 25.6431
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [279] Train Loss: 0.3395 | Train MAE: 0.3383 | Val Loss: 0.4597 | Val MAE: 0.4586 | Test MAE: 0.4987 | Time: 25.9270
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [280] Train Loss: 0.3469 | Train MAE: 0.3456 | Val Loss: 0.6195 | Val MAE: 0.6183 | Test MAE: 0.6296 | Time: 26.2353
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [281] Train Loss: 0.3220 | Train MAE: 0.3208 | Val Loss: 0.4924 | Val MAE: 0.4913 | Test MAE: 0.5130 | Time: 26.7299
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [282] Train Loss: 0.3326 | Train MAE: 0.3314 | Val Loss: 0.4797 | Val MAE: 0.4786 | Test MAE: 0.4981 | Time: 27.2024
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [283] Train Loss: 0.3426 | Train MAE: 0.3414 | Val Loss: 0.5006 | Val MAE: 0.4995 | Test MAE: 0.5132 | Time: 26.3501
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [284] Train Loss: 0.3440 | Train MAE: 0.3427 | Val Loss: 0.4627 | Val MAE: 0.4616 | Test MAE: 0.4812 | Time: 25.8954
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [285] Train Loss: 0.3371 | Train MAE: 0.3359 | Val Loss: 0.5242 | Val MAE: 0.5230 | Test MAE: 0.5294 | Time: 26.9221
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [286] Train Loss: 0.3227 | Train MAE: 0.3215 | Val Loss: 0.4423 | Val MAE: 0.4411 | Test MAE: 0.4809 | Time: 26.1618
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [287] Train Loss: 0.3392 | Train MAE: 0.3380 | Val Loss: 0.4648 | Val MAE: 0.4637 | Test MAE: 0.4674 | Time: 26.4527
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [288] Train Loss: 0.3306 | Train MAE: 0.3294 | Val Loss: 0.5624 | Val MAE: 0.5613 | Test MAE: 0.5773 | Time: 27.0071
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [289] Train Loss: 0.3359 | Train MAE: 0.3347 | Val Loss: 0.4956 | Val MAE: 0.4944 | Test MAE: 0.4984 | Time: 26.4852
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [290] Train Loss: 0.3375 | Train MAE: 0.3363 | Val Loss: 0.4610 | Val MAE: 0.4599 | Test MAE: 0.4868 | Time: 26.3905
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [291] Train Loss: 0.3101 | Train MAE: 0.3089 | Val Loss: 0.4469 | Val MAE: 0.4458 | Test MAE: 0.4515 | Time: 26.4063
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [292] Train Loss: 0.3248 | Train MAE: 0.3235 | Val Loss: 0.4385 | Val MAE: 0.4373 | Test MAE: 0.4590 | Time: 25.9586
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [293] Train Loss: 0.3158 | Train MAE: 0.3146 | Val Loss: 0.4357 | Val MAE: 0.4346 | Test MAE: 0.4599 | Time: 25.9273
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [294] Train Loss: 0.3250 | Train MAE: 0.3238 | Val Loss: 0.4360 | Val MAE: 0.4349 | Test MAE: 0.4673 | Time: 26.2854
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [295] Train Loss: 0.3218 | Train MAE: 0.3206 | Val Loss: 0.4549 | Val MAE: 0.4538 | Test MAE: 0.4674 | Time: 26.4416
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [296] Train Loss: 0.3184 | Train MAE: 0.3172 | Val Loss: 0.4423 | Val MAE: 0.4412 | Test MAE: 0.4578 | Time: 26.0245
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [297] Train Loss: 0.3324 | Train MAE: 0.3312 | Val Loss: 0.5256 | Val MAE: 0.5244 | Test MAE: 0.5551 | Time: 26.3059
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [298] Train Loss: 0.3355 | Train MAE: 0.3343 | Val Loss: 0.5110 | Val MAE: 0.5099 | Test MAE: 0.5158 | Time: 26.4280
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [299] Train Loss: 0.3245 | Train MAE: 0.3233 | Val Loss: 0.4511 | Val MAE: 0.4500 | Test MAE: 0.4955 | Time: 26.7859
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [300] Train Loss: 0.3042 | Train MAE: 0.3030 | Val Loss: 0.4218 | Val MAE: 0.4207 | Test MAE: 0.4525 | Time: 27.4014
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [301] Train Loss: 0.3353 | Train MAE: 0.3341 | Val Loss: 0.4474 | Val MAE: 0.4463 | Test MAE: 0.4721 | Time: 25.3841
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [302] Train Loss: 0.3360 | Train MAE: 0.3348 | Val Loss: 0.4515 | Val MAE: 0.4503 | Test MAE: 0.4771 | Time: 26.3444
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [303] Train Loss: 0.3118 | Train MAE: 0.3105 | Val Loss: 0.5298 | Val MAE: 0.5287 | Test MAE: 0.5375 | Time: 26.4913
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [304] Train Loss: 0.3240 | Train MAE: 0.3228 | Val Loss: 0.4579 | Val MAE: 0.4567 | Test MAE: 0.4781 | Time: 27.0996
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [305] Train Loss: 0.3495 | Train MAE: 0.3482 | Val Loss: 0.5549 | Val MAE: 0.5537 | Test MAE: 0.5606 | Time: 25.7539
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [306] Train Loss: 0.3489 | Train MAE: 0.3477 | Val Loss: 0.4869 | Val MAE: 0.4858 | Test MAE: 0.5049 | Time: 26.3891
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [307] Train Loss: 0.3587 | Train MAE: 0.3575 | Val Loss: 0.4555 | Val MAE: 0.4544 | Test MAE: 0.4729 | Time: 26.5823
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [308] Train Loss: 0.3215 | Train MAE: 0.3203 | Val Loss: 0.5420 | Val MAE: 0.5409 | Test MAE: 0.5375 | Time: 25.4710
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [309] Train Loss: 0.3319 | Train MAE: 0.3307 | Val Loss: 0.5039 | Val MAE: 0.5028 | Test MAE: 0.5061 | Time: 25.9418
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [310] Train Loss: 0.3346 | Train MAE: 0.3334 | Val Loss: 0.4842 | Val MAE: 0.4831 | Test MAE: 0.4984 | Time: 26.4161
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [311] Train Loss: 0.3354 | Train MAE: 0.3342 | Val Loss: 0.4901 | Val MAE: 0.4889 | Test MAE: 0.4944 | Time: 25.2895
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [312] Train Loss: 0.3125 | Train MAE: 0.3113 | Val Loss: 0.6119 | Val MAE: 0.6108 | Test MAE: 0.5927 | Time: 26.2602
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [313] Train Loss: 0.3257 | Train MAE: 0.3245 | Val Loss: 0.4428 | Val MAE: 0.4416 | Test MAE: 0.4540 | Time: 25.9106
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [314] Train Loss: 0.3109 | Train MAE: 0.3097 | Val Loss: 0.4519 | Val MAE: 0.4507 | Test MAE: 0.4718 | Time: 26.7828
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [315] Train Loss: 0.3274 | Train MAE: 0.3262 | Val Loss: 0.4764 | Val MAE: 0.4753 | Test MAE: 0.4839 | Time: 25.7377
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [316] Train Loss: 0.3170 | Train MAE: 0.3158 | Val Loss: 0.5491 | Val MAE: 0.5479 | Test MAE: 0.5370 | Time: 26.1549
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [317] Train Loss: 0.3198 | Train MAE: 0.3186 | Val Loss: 0.4301 | Val MAE: 0.4289 | Test MAE: 0.4372 | Time: 26.7059
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [318] Train Loss: 0.2884 | Train MAE: 0.2871 | Val Loss: 0.5077 | Val MAE: 0.5065 | Test MAE: 0.4899 | Time: 25.6807
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [319] Train Loss: 0.2992 | Train MAE: 0.2980 | Val Loss: 0.4464 | Val MAE: 0.4452 | Test MAE: 0.4684 | Time: 25.9777
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [320] Train Loss: 0.3128 | Train MAE: 0.3116 | Val Loss: 0.4832 | Val MAE: 0.4821 | Test MAE: 0.4948 | Time: 26.3962
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [321] Train Loss: 0.3225 | Train MAE: 0.3213 | Val Loss: 0.4330 | Val MAE: 0.4319 | Test MAE: 0.4433 | Time: 26.5548
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [322] Train Loss: 0.3406 | Train MAE: 0.3394 | Val Loss: 0.4955 | Val MAE: 0.4943 | Test MAE: 0.5081 | Time: 26.7715
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [323] Train Loss: 0.3170 | Train MAE: 0.3158 | Val Loss: 0.4353 | Val MAE: 0.4341 | Test MAE: 0.4493 | Time: 26.6105
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [324] Train Loss: 0.3065 | Train MAE: 0.3053 | Val Loss: 0.4412 | Val MAE: 0.4400 | Test MAE: 0.4443 | Time: 27.5333
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [325] Train Loss: 0.3071 | Train MAE: 0.3059 | Val Loss: 0.5267 | Val MAE: 0.5255 | Test MAE: 0.5062 | Time: 25.7386
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [326] Train Loss: 0.2987 | Train MAE: 0.2975 | Val Loss: 0.4444 | Val MAE: 0.4433 | Test MAE: 0.4401 | Time: 27.4574
Epoch 00327: reducing learning rate of group 0 to 5.0000e-04.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [327] Train Loss: 0.2652 | Train MAE: 0.2640 | Val Loss: 0.4225 | Val MAE: 0.4213 | Test MAE: 0.4253 | Time: 25.6650
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [328] Train Loss: 0.2623 | Train MAE: 0.2611 | Val Loss: 0.4490 | Val MAE: 0.4479 | Test MAE: 0.4476 | Time: 25.9663
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [329] Train Loss: 0.2563 | Train MAE: 0.2551 | Val Loss: 0.4362 | Val MAE: 0.4351 | Test MAE: 0.4525 | Time: 26.4942
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [330] Train Loss: 0.2524 | Train MAE: 0.2512 | Val Loss: 0.4318 | Val MAE: 0.4307 | Test MAE: 0.4326 | Time: 26.0809
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [331] Train Loss: 0.2396 | Train MAE: 0.2383 | Val Loss: 0.4280 | Val MAE: 0.4268 | Test MAE: 0.4150 | Time: 27.0950
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [332] Train Loss: 0.2501 | Train MAE: 0.2489 | Val Loss: 0.4633 | Val MAE: 0.4622 | Test MAE: 0.4555 | Time: 25.7519
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [333] Train Loss: 0.2581 | Train MAE: 0.2569 | Val Loss: 0.4601 | Val MAE: 0.4590 | Test MAE: 0.4583 | Time: 26.2330
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [334] Train Loss: 0.2506 | Train MAE: 0.2494 | Val Loss: 0.5212 | Val MAE: 0.5201 | Test MAE: 0.5258 | Time: 26.4514
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [335] Train Loss: 0.2520 | Train MAE: 0.2507 | Val Loss: 0.4267 | Val MAE: 0.4256 | Test MAE: 0.4188 | Time: 25.6137
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [336] Train Loss: 0.2522 | Train MAE: 0.2510 | Val Loss: 0.4338 | Val MAE: 0.4327 | Test MAE: 0.4234 | Time: 26.3686
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [337] Train Loss: 0.2503 | Train MAE: 0.2491 | Val Loss: 0.4239 | Val MAE: 0.4227 | Test MAE: 0.4184 | Time: 26.7111
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [338] Train Loss: 0.2459 | Train MAE: 0.2447 | Val Loss: 0.4233 | Val MAE: 0.4221 | Test MAE: 0.4193 | Time: 25.1244
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [339] Train Loss: 0.2374 | Train MAE: 0.2362 | Val Loss: 0.4523 | Val MAE: 0.4511 | Test MAE: 0.4403 | Time: 25.7410
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [340] Train Loss: 0.2534 | Train MAE: 0.2521 | Val Loss: 0.4319 | Val MAE: 0.4307 | Test MAE: 0.4319 | Time: 26.0442
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [341] Train Loss: 0.2420 | Train MAE: 0.2408 | Val Loss: 0.4223 | Val MAE: 0.4211 | Test MAE: 0.4182 | Time: 26.4880
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [342] Train Loss: 0.2419 | Train MAE: 0.2407 | Val Loss: 0.4297 | Val MAE: 0.4285 | Test MAE: 0.4205 | Time: 25.1708
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [343] Train Loss: 0.2616 | Train MAE: 0.2603 | Val Loss: 0.4699 | Val MAE: 0.4688 | Test MAE: 0.4483 | Time: 25.8537
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [344] Train Loss: 0.2451 | Train MAE: 0.2439 | Val Loss: 0.4668 | Val MAE: 0.4657 | Test MAE: 0.4545 | Time: 26.8331
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [345] Train Loss: 0.2478 | Train MAE: 0.2466 | Val Loss: 0.4430 | Val MAE: 0.4419 | Test MAE: 0.4481 | Time: 27.2024
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [346] Train Loss: 0.2429 | Train MAE: 0.2417 | Val Loss: 0.4266 | Val MAE: 0.4254 | Test MAE: 0.4279 | Time: 26.9939
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [347] Train Loss: 0.2386 | Train MAE: 0.2374 | Val Loss: 0.4254 | Val MAE: 0.4243 | Test MAE: 0.4269 | Time: 28.2289
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [348] Train Loss: 0.2449 | Train MAE: 0.2436 | Val Loss: 0.4269 | Val MAE: 0.4257 | Test MAE: 0.4205 | Time: 26.2895
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [349] Train Loss: 0.2473 | Train MAE: 0.2461 | Val Loss: 0.4409 | Val MAE: 0.4397 | Test MAE: 0.4585 | Time: 26.2376
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [350] Train Loss: 0.2324 | Train MAE: 0.2312 | Val Loss: 0.4622 | Val MAE: 0.4611 | Test MAE: 0.4618 | Time: 26.9670
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [351] Train Loss: 0.2535 | Train MAE: 0.2523 | Val Loss: 0.4220 | Val MAE: 0.4209 | Test MAE: 0.4258 | Time: 27.5084
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [352] Train Loss: 0.2335 | Train MAE: 0.2323 | Val Loss: 0.4744 | Val MAE: 0.4733 | Test MAE: 0.4906 | Time: 26.8827
Epoch 00353: reducing learning rate of group 0 to 2.5000e-04.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [353] Train Loss: 0.2295 | Train MAE: 0.2283 | Val Loss: 0.4480 | Val MAE: 0.4468 | Test MAE: 0.4496 | Time: 26.7133
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [354] Train Loss: 0.2159 | Train MAE: 0.2147 | Val Loss: 0.4144 | Val MAE: 0.4132 | Test MAE: 0.4208 | Time: 27.2604
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [355] Train Loss: 0.2168 | Train MAE: 0.2155 | Val Loss: 0.4368 | Val MAE: 0.4357 | Test MAE: 0.4422 | Time: 30.4096
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [356] Train Loss: 0.2211 | Train MAE: 0.2199 | Val Loss: 0.4188 | Val MAE: 0.4176 | Test MAE: 0.4262 | Time: 26.8071
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [357] Train Loss: 0.2152 | Train MAE: 0.2140 | Val Loss: 0.4321 | Val MAE: 0.4310 | Test MAE: 0.4336 | Time: 26.6260
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [358] Train Loss: 0.2051 | Train MAE: 0.2039 | Val Loss: 0.4210 | Val MAE: 0.4199 | Test MAE: 0.4202 | Time: 25.6498
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [359] Train Loss: 0.2236 | Train MAE: 0.2224 | Val Loss: 0.4340 | Val MAE: 0.4329 | Test MAE: 0.4296 | Time: 27.1912
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [360] Train Loss: 0.2113 | Train MAE: 0.2101 | Val Loss: 0.4594 | Val MAE: 0.4583 | Test MAE: 0.4570 | Time: 27.2180
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [361] Train Loss: 0.2211 | Train MAE: 0.2199 | Val Loss: 0.4181 | Val MAE: 0.4169 | Test MAE: 0.4173 | Time: 26.1810
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [362] Train Loss: 0.2102 | Train MAE: 0.2090 | Val Loss: 0.4223 | Val MAE: 0.4212 | Test MAE: 0.4211 | Time: 26.1821
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [363] Train Loss: 0.2006 | Train MAE: 0.1994 | Val Loss: 0.4534 | Val MAE: 0.4523 | Test MAE: 0.4376 | Time: 26.0989
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [364] Train Loss: 0.2047 | Train MAE: 0.2035 | Val Loss: 0.4278 | Val MAE: 0.4267 | Test MAE: 0.4262 | Time: 25.9943
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [365] Train Loss: 0.2107 | Train MAE: 0.2094 | Val Loss: 0.4187 | Val MAE: 0.4175 | Test MAE: 0.4235 | Time: 27.6893
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [366] Train Loss: 0.2051 | Train MAE: 0.2039 | Val Loss: 0.4220 | Val MAE: 0.4209 | Test MAE: 0.4244 | Time: 28.2689
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [367] Train Loss: 0.2051 | Train MAE: 0.2039 | Val Loss: 0.4107 | Val MAE: 0.4096 | Test MAE: 0.4206 | Time: 29.6757
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [368] Train Loss: 0.2002 | Train MAE: 0.1990 | Val Loss: 0.4238 | Val MAE: 0.4226 | Test MAE: 0.4218 | Time: 29.5973
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [369] Train Loss: 0.2045 | Train MAE: 0.2033 | Val Loss: 0.4449 | Val MAE: 0.4438 | Test MAE: 0.4426 | Time: 28.0480
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [370] Train Loss: 0.2086 | Train MAE: 0.2074 | Val Loss: 0.4216 | Val MAE: 0.4204 | Test MAE: 0.4239 | Time: 25.9337
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [371] Train Loss: 0.1996 | Train MAE: 0.1984 | Val Loss: 0.4332 | Val MAE: 0.4321 | Test MAE: 0.4303 | Time: 26.9837
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [372] Train Loss: 0.2077 | Train MAE: 0.2065 | Val Loss: 0.4347 | Val MAE: 0.4335 | Test MAE: 0.4323 | Time: 25.9665
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [373] Train Loss: 0.2012 | Train MAE: 0.2000 | Val Loss: 0.4126 | Val MAE: 0.4115 | Test MAE: 0.4320 | Time: 25.5130
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [374] Train Loss: 0.2064 | Train MAE: 0.2052 | Val Loss: 0.4549 | Val MAE: 0.4537 | Test MAE: 0.4488 | Time: 29.7152
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [375] Train Loss: 0.2002 | Train MAE: 0.1990 | Val Loss: 0.4297 | Val MAE: 0.4285 | Test MAE: 0.4297 | Time: 26.7102
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [376] Train Loss: 0.1999 | Train MAE: 0.1987 | Val Loss: 0.4252 | Val MAE: 0.4240 | Test MAE: 0.4271 | Time: 26.2475
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [377] Train Loss: 0.1932 | Train MAE: 0.1920 | Val Loss: 0.4347 | Val MAE: 0.4335 | Test MAE: 0.4202 | Time: 25.9802
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [378] Train Loss: 0.1917 | Train MAE: 0.1904 | Val Loss: 0.4178 | Val MAE: 0.4167 | Test MAE: 0.4188 | Time: 25.5573
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [379] Train Loss: 0.1972 | Train MAE: 0.1960 | Val Loss: 0.4200 | Val MAE: 0.4188 | Test MAE: 0.4259 | Time: 25.7451
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [380] Train Loss: 0.2029 | Train MAE: 0.2017 | Val Loss: 0.4215 | Val MAE: 0.4204 | Test MAE: 0.4261 | Time: 26.2231
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [381] Train Loss: 0.1917 | Train MAE: 0.1905 | Val Loss: 0.4269 | Val MAE: 0.4258 | Test MAE: 0.4285 | Time: 25.9558
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [382] Train Loss: 0.2000 | Train MAE: 0.1988 | Val Loss: 0.4279 | Val MAE: 0.4267 | Test MAE: 0.4356 | Time: 26.7560
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [383] Train Loss: 0.2054 | Train MAE: 0.2042 | Val Loss: 0.4205 | Val MAE: 0.4193 | Test MAE: 0.4255 | Time: 25.1576
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [384] Train Loss: 0.1981 | Train MAE: 0.1969 | Val Loss: 0.4135 | Val MAE: 0.4123 | Test MAE: 0.4240 | Time: 25.9308
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [385] Train Loss: 0.1920 | Train MAE: 0.1908 | Val Loss: 0.4252 | Val MAE: 0.4240 | Test MAE: 0.4294 | Time: 27.4131
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [386] Train Loss: 0.1890 | Train MAE: 0.1878 | Val Loss: 0.4146 | Val MAE: 0.4135 | Test MAE: 0.4286 | Time: 26.4008
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [387] Train Loss: 0.2070 | Train MAE: 0.2057 | Val Loss: 0.4117 | Val MAE: 0.4106 | Test MAE: 0.4261 | Time: 30.6669
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [388] Train Loss: 0.1991 | Train MAE: 0.1978 | Val Loss: 0.4229 | Val MAE: 0.4217 | Test MAE: 0.4305 | Time: 26.6959
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [389] Train Loss: 0.1971 | Train MAE: 0.1958 | Val Loss: 0.4448 | Val MAE: 0.4436 | Test MAE: 0.4349 | Time: 25.7724
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [390] Train Loss: 0.1955 | Train MAE: 0.1943 | Val Loss: 0.4244 | Val MAE: 0.4233 | Test MAE: 0.4279 | Time: 29.6924
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [391] Train Loss: 0.1892 | Train MAE: 0.1880 | Val Loss: 0.4324 | Val MAE: 0.4313 | Test MAE: 0.4436 | Time: 30.0596
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [392] Train Loss: 0.1977 | Train MAE: 0.1965 | Val Loss: 0.4185 | Val MAE: 0.4173 | Test MAE: 0.4227 | Time: 26.7027
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [393] Train Loss: 0.1975 | Train MAE: 0.1963 | Val Loss: 0.4300 | Val MAE: 0.4288 | Test MAE: 0.4316 | Time: 26.0918
Epoch 00394: reducing learning rate of group 0 to 1.2500e-04.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [394] Train Loss: 0.1868 | Train MAE: 0.1855 | Val Loss: 0.4225 | Val MAE: 0.4214 | Test MAE: 0.4244 | Time: 25.7557
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [395] Train Loss: 0.1811 | Train MAE: 0.1799 | Val Loss: 0.4373 | Val MAE: 0.4362 | Test MAE: 0.4375 | Time: 28.0672
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [396] Train Loss: 0.1813 | Train MAE: 0.1800 | Val Loss: 0.4226 | Val MAE: 0.4215 | Test MAE: 0.4223 | Time: 27.1790
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [397] Train Loss: 0.1791 | Train MAE: 0.1779 | Val Loss: 0.4182 | Val MAE: 0.4171 | Test MAE: 0.4202 | Time: 25.8749
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [398] Train Loss: 0.1760 | Train MAE: 0.1747 | Val Loss: 0.4224 | Val MAE: 0.4213 | Test MAE: 0.4264 | Time: 26.5366
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [399] Train Loss: 0.1783 | Train MAE: 0.1770 | Val Loss: 0.4301 | Val MAE: 0.4289 | Test MAE: 0.4267 | Time: 26.6285
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [400] Train Loss: 0.1777 | Train MAE: 0.1765 | Val Loss: 0.4245 | Val MAE: 0.4234 | Test MAE: 0.4268 | Time: 25.8513
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [401] Train Loss: 0.1698 | Train MAE: 0.1686 | Val Loss: 0.4215 | Val MAE: 0.4204 | Test MAE: 0.4249 | Time: 26.2294
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [402] Train Loss: 0.1908 | Train MAE: 0.1896 | Val Loss: 0.4263 | Val MAE: 0.4252 | Test MAE: 0.4392 | Time: 27.6458
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [403] Train Loss: 0.1852 | Train MAE: 0.1839 | Val Loss: 0.4386 | Val MAE: 0.4374 | Test MAE: 0.4349 | Time: 26.1138
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [404] Train Loss: 0.1781 | Train MAE: 0.1769 | Val Loss: 0.4277 | Val MAE: 0.4266 | Test MAE: 0.4279 | Time: 25.9896
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [405] Train Loss: 0.1847 | Train MAE: 0.1834 | Val Loss: 0.4298 | Val MAE: 0.4286 | Test MAE: 0.4293 | Time: 26.3265
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [406] Train Loss: 0.1781 | Train MAE: 0.1769 | Val Loss: 0.4186 | Val MAE: 0.4174 | Test MAE: 0.4225 | Time: 25.4958
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [407] Train Loss: 0.1766 | Train MAE: 0.1754 | Val Loss: 0.4264 | Val MAE: 0.4252 | Test MAE: 0.4254 | Time: 25.8734
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [408] Train Loss: 0.1833 | Train MAE: 0.1821 | Val Loss: 0.4218 | Val MAE: 0.4207 | Test MAE: 0.4255 | Time: 28.2656
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [409] Train Loss: 0.1776 | Train MAE: 0.1763 | Val Loss: 0.4223 | Val MAE: 0.4212 | Test MAE: 0.4289 | Time: 26.1341
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [410] Train Loss: 0.1737 | Train MAE: 0.1725 | Val Loss: 0.4196 | Val MAE: 0.4184 | Test MAE: 0.4273 | Time: 28.4255
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [411] Train Loss: 0.1796 | Train MAE: 0.1784 | Val Loss: 0.4257 | Val MAE: 0.4246 | Test MAE: 0.4272 | Time: 26.3969
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [412] Train Loss: 0.1729 | Train MAE: 0.1716 | Val Loss: 0.4367 | Val MAE: 0.4356 | Test MAE: 0.4360 | Time: 25.9270
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [413] Train Loss: 0.1697 | Train MAE: 0.1685 | Val Loss: 0.4252 | Val MAE: 0.4241 | Test MAE: 0.4333 | Time: 26.5176
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [414] Train Loss: 0.1855 | Train MAE: 0.1843 | Val Loss: 0.4204 | Val MAE: 0.4192 | Test MAE: 0.4274 | Time: 25.3227
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [415] Train Loss: 0.1712 | Train MAE: 0.1700 | Val Loss: 0.4175 | Val MAE: 0.4163 | Test MAE: 0.4241 | Time: 26.0908
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [416] Train Loss: 0.1786 | Train MAE: 0.1774 | Val Loss: 0.4212 | Val MAE: 0.4200 | Test MAE: 0.4213 | Time: 25.7922
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [417] Train Loss: 0.1697 | Train MAE: 0.1685 | Val Loss: 0.4256 | Val MAE: 0.4244 | Test MAE: 0.4249 | Time: 26.3611
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [418] Train Loss: 0.1693 | Train MAE: 0.1681 | Val Loss: 0.4181 | Val MAE: 0.4170 | Test MAE: 0.4269 | Time: 26.9136
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [419] Train Loss: 0.1725 | Train MAE: 0.1713 | Val Loss: 0.4266 | Val MAE: 0.4255 | Test MAE: 0.4286 | Time: 28.4295
Epoch 00420: reducing learning rate of group 0 to 6.2500e-05.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [420] Train Loss: 0.1710 | Train MAE: 0.1698 | Val Loss: 0.4246 | Val MAE: 0.4235 | Test MAE: 0.4265 | Time: 27.8691
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [421] Train Loss: 0.1709 | Train MAE: 0.1697 | Val Loss: 0.4259 | Val MAE: 0.4248 | Test MAE: 0.4283 | Time: 26.7894
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [422] Train Loss: 0.1731 | Train MAE: 0.1719 | Val Loss: 0.4237 | Val MAE: 0.4225 | Test MAE: 0.4260 | Time: 26.9119
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [423] Train Loss: 0.1706 | Train MAE: 0.1694 | Val Loss: 0.4193 | Val MAE: 0.4181 | Test MAE: 0.4295 | Time: 27.0460
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [424] Train Loss: 0.1636 | Train MAE: 0.1624 | Val Loss: 0.4293 | Val MAE: 0.4281 | Test MAE: 0.4313 | Time: 27.2346
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [425] Train Loss: 0.1607 | Train MAE: 0.1595 | Val Loss: 0.4194 | Val MAE: 0.4182 | Test MAE: 0.4239 | Time: 26.9755
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [426] Train Loss: 0.1691 | Train MAE: 0.1679 | Val Loss: 0.4303 | Val MAE: 0.4292 | Test MAE: 0.4320 | Time: 27.4173
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [427] Train Loss: 0.1718 | Train MAE: 0.1705 | Val Loss: 0.4246 | Val MAE: 0.4235 | Test MAE: 0.4252 | Time: 25.9852
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [428] Train Loss: 0.1661 | Train MAE: 0.1648 | Val Loss: 0.4215 | Val MAE: 0.4203 | Test MAE: 0.4264 | Time: 26.6420
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [429] Train Loss: 0.1688 | Train MAE: 0.1676 | Val Loss: 0.4187 | Val MAE: 0.4175 | Test MAE: 0.4263 | Time: 27.0980
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [430] Train Loss: 0.1664 | Train MAE: 0.1652 | Val Loss: 0.4178 | Val MAE: 0.4167 | Test MAE: 0.4256 | Time: 26.8501
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [431] Train Loss: 0.1725 | Train MAE: 0.1713 | Val Loss: 0.4165 | Val MAE: 0.4153 | Test MAE: 0.4222 | Time: 26.8156
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [432] Train Loss: 0.1667 | Train MAE: 0.1655 | Val Loss: 0.4232 | Val MAE: 0.4220 | Test MAE: 0.4276 | Time: 26.0965
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [433] Train Loss: 0.1592 | Train MAE: 0.1580 | Val Loss: 0.4229 | Val MAE: 0.4217 | Test MAE: 0.4268 | Time: 26.5843
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [434] Train Loss: 0.1660 | Train MAE: 0.1648 | Val Loss: 0.4202 | Val MAE: 0.4191 | Test MAE: 0.4270 | Time: 26.7849
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [435] Train Loss: 0.1565 | Train MAE: 0.1553 | Val Loss: 0.4215 | Val MAE: 0.4204 | Test MAE: 0.4288 | Time: 27.2980
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [436] Train Loss: 0.1630 | Train MAE: 0.1618 | Val Loss: 0.4222 | Val MAE: 0.4210 | Test MAE: 0.4294 | Time: 26.8484
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [437] Train Loss: 0.1675 | Train MAE: 0.1663 | Val Loss: 0.4314 | Val MAE: 0.4302 | Test MAE: 0.4332 | Time: 26.1850
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [438] Train Loss: 0.1655 | Train MAE: 0.1642 | Val Loss: 0.4249 | Val MAE: 0.4237 | Test MAE: 0.4274 | Time: 26.5602
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [439] Train Loss: 0.1658 | Train MAE: 0.1645 | Val Loss: 0.4190 | Val MAE: 0.4178 | Test MAE: 0.4279 | Time: 26.9723
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [440] Train Loss: 0.1651 | Train MAE: 0.1639 | Val Loss: 0.4260 | Val MAE: 0.4248 | Test MAE: 0.4246 | Time: 26.8652
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [441] Train Loss: 0.1631 | Train MAE: 0.1619 | Val Loss: 0.4190 | Val MAE: 0.4178 | Test MAE: 0.4260 | Time: 26.9717
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [442] Train Loss: 0.1594 | Train MAE: 0.1581 | Val Loss: 0.4218 | Val MAE: 0.4207 | Test MAE: 0.4290 | Time: 25.8177
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [443] Train Loss: 0.1651 | Train MAE: 0.1639 | Val Loss: 0.4238 | Val MAE: 0.4226 | Test MAE: 0.4266 | Time: 26.6285
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [444] Train Loss: 0.1659 | Train MAE: 0.1647 | Val Loss: 0.4185 | Val MAE: 0.4173 | Test MAE: 0.4270 | Time: 26.5596
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [445] Train Loss: 0.1604 | Train MAE: 0.1592 | Val Loss: 0.4215 | Val MAE: 0.4204 | Test MAE: 0.4269 | Time: 27.4712
Epoch 00446: reducing learning rate of group 0 to 3.1250e-05.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [446] Train Loss: 0.1542 | Train MAE: 0.1530 | Val Loss: 0.4250 | Val MAE: 0.4238 | Test MAE: 0.4275 | Time: 25.8070
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [447] Train Loss: 0.1564 | Train MAE: 0.1551 | Val Loss: 0.4254 | Val MAE: 0.4242 | Test MAE: 0.4287 | Time: 26.7310
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [448] Train Loss: 0.1547 | Train MAE: 0.1534 | Val Loss: 0.4239 | Val MAE: 0.4228 | Test MAE: 0.4285 | Time: 27.0263
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [449] Train Loss: 0.1605 | Train MAE: 0.1592 | Val Loss: 0.4278 | Val MAE: 0.4267 | Test MAE: 0.4296 | Time: 25.7665
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [450] Train Loss: 0.1634 | Train MAE: 0.1622 | Val Loss: 0.4218 | Val MAE: 0.4207 | Test MAE: 0.4310 | Time: 26.3897
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [451] Train Loss: 0.1616 | Train MAE: 0.1604 | Val Loss: 0.4208 | Val MAE: 0.4196 | Test MAE: 0.4277 | Time: 26.4166
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [452] Train Loss: 0.1600 | Train MAE: 0.1588 | Val Loss: 0.4221 | Val MAE: 0.4209 | Test MAE: 0.4268 | Time: 25.5995
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [453] Train Loss: 0.1556 | Train MAE: 0.1544 | Val Loss: 0.4255 | Val MAE: 0.4244 | Test MAE: 0.4288 | Time: 25.9577
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [454] Train Loss: 0.1564 | Train MAE: 0.1552 | Val Loss: 0.4267 | Val MAE: 0.4256 | Test MAE: 0.4278 | Time: 25.8904
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [455] Train Loss: 0.1556 | Train MAE: 0.1543 | Val Loss: 0.4238 | Val MAE: 0.4226 | Test MAE: 0.4274 | Time: 26.3549
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [456] Train Loss: 0.1565 | Train MAE: 0.1553 | Val Loss: 0.4228 | Val MAE: 0.4217 | Test MAE: 0.4298 | Time: 26.8658
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [457] Train Loss: 0.1571 | Train MAE: 0.1559 | Val Loss: 0.4229 | Val MAE: 0.4217 | Test MAE: 0.4277 | Time: 25.5285
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [458] Train Loss: 0.1512 | Train MAE: 0.1499 | Val Loss: 0.4198 | Val MAE: 0.4187 | Test MAE: 0.4260 | Time: 26.7881
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [459] Train Loss: 0.1537 | Train MAE: 0.1524 | Val Loss: 0.4209 | Val MAE: 0.4197 | Test MAE: 0.4274 | Time: 26.4094
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [460] Train Loss: 0.1503 | Train MAE: 0.1491 | Val Loss: 0.4243 | Val MAE: 0.4231 | Test MAE: 0.4277 | Time: 27.3897
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [461] Train Loss: 0.1590 | Train MAE: 0.1578 | Val Loss: 0.4258 | Val MAE: 0.4246 | Test MAE: 0.4275 | Time: 26.1728
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [462] Train Loss: 0.1564 | Train MAE: 0.1552 | Val Loss: 0.4236 | Val MAE: 0.4224 | Test MAE: 0.4275 | Time: 26.1245
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [463] Train Loss: 0.1580 | Train MAE: 0.1568 | Val Loss: 0.4261 | Val MAE: 0.4249 | Test MAE: 0.4282 | Time: 26.6756
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [464] Train Loss: 0.1585 | Train MAE: 0.1573 | Val Loss: 0.4267 | Val MAE: 0.4255 | Test MAE: 0.4288 | Time: 26.4529
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [465] Train Loss: 0.1556 | Train MAE: 0.1544 | Val Loss: 0.4221 | Val MAE: 0.4209 | Test MAE: 0.4251 | Time: 26.1198
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [466] Train Loss: 0.1602 | Train MAE: 0.1590 | Val Loss: 0.4290 | Val MAE: 0.4279 | Test MAE: 0.4307 | Time: 26.9588
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [467] Train Loss: 0.1663 | Train MAE: 0.1651 | Val Loss: 0.4179 | Val MAE: 0.4167 | Test MAE: 0.4265 | Time: 26.5843
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [468] Train Loss: 0.1559 | Train MAE: 0.1546 | Val Loss: 0.4229 | Val MAE: 0.4217 | Test MAE: 0.4280 | Time: 26.6318
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [469] Train Loss: 0.1579 | Train MAE: 0.1567 | Val Loss: 0.4287 | Val MAE: 0.4276 | Test MAE: 0.4293 | Time: 26.2309
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [470] Train Loss: 0.1596 | Train MAE: 0.1583 | Val Loss: 0.4257 | Val MAE: 0.4245 | Test MAE: 0.4297 | Time: 27.1655
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [471] Train Loss: 0.1535 | Train MAE: 0.1523 | Val Loss: 0.4241 | Val MAE: 0.4229 | Test MAE: 0.4268 | Time: 25.8236
Epoch 00472: reducing learning rate of group 0 to 1.5625e-05.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [472] Train Loss: 0.1527 | Train MAE: 0.1515 | Val Loss: 0.4150 | Val MAE: 0.4138 | Test MAE: 0.4241 | Time: 26.7954
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [473] Train Loss: 0.1501 | Train MAE: 0.1489 | Val Loss: 0.4236 | Val MAE: 0.4225 | Test MAE: 0.4253 | Time: 25.7382
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [474] Train Loss: 0.1505 | Train MAE: 0.1492 | Val Loss: 0.4220 | Val MAE: 0.4208 | Test MAE: 0.4264 | Time: 25.9742
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [475] Train Loss: 0.1595 | Train MAE: 0.1583 | Val Loss: 0.4168 | Val MAE: 0.4156 | Test MAE: 0.4240 | Time: 26.6384
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [476] Train Loss: 0.1537 | Train MAE: 0.1525 | Val Loss: 0.4194 | Val MAE: 0.4182 | Test MAE: 0.4262 | Time: 25.9708
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [477] Train Loss: 0.1605 | Train MAE: 0.1593 | Val Loss: 0.4220 | Val MAE: 0.4209 | Test MAE: 0.4259 | Time: 26.6938
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [478] Train Loss: 0.1518 | Train MAE: 0.1506 | Val Loss: 0.4276 | Val MAE: 0.4264 | Test MAE: 0.4288 | Time: 27.4477
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [479] Train Loss: 0.1522 | Train MAE: 0.1510 | Val Loss: 0.4182 | Val MAE: 0.4171 | Test MAE: 0.4263 | Time: 27.4551
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [480] Train Loss: 0.1570 | Train MAE: 0.1558 | Val Loss: 0.4235 | Val MAE: 0.4224 | Test MAE: 0.4281 | Time: 25.0466
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [481] Train Loss: 0.1573 | Train MAE: 0.1561 | Val Loss: 0.4281 | Val MAE: 0.4269 | Test MAE: 0.4292 | Time: 26.6276
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [482] Train Loss: 0.1536 | Train MAE: 0.1524 | Val Loss: 0.4190 | Val MAE: 0.4178 | Test MAE: 0.4248 | Time: 28.6239
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [483] Train Loss: 0.1513 | Train MAE: 0.1500 | Val Loss: 0.4219 | Val MAE: 0.4207 | Test MAE: 0.4265 | Time: 26.2189
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [484] Train Loss: 0.1546 | Train MAE: 0.1533 | Val Loss: 0.4229 | Val MAE: 0.4217 | Test MAE: 0.4248 | Time: 30.4632
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [485] Train Loss: 0.1653 | Train MAE: 0.1640 | Val Loss: 0.4212 | Val MAE: 0.4200 | Test MAE: 0.4245 | Time: 28.3713
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [486] Train Loss: 0.1516 | Train MAE: 0.1504 | Val Loss: 0.4262 | Val MAE: 0.4251 | Test MAE: 0.4297 | Time: 26.0401
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [487] Train Loss: 0.1587 | Train MAE: 0.1575 | Val Loss: 0.4199 | Val MAE: 0.4188 | Test MAE: 0.4245 | Time: 29.3038
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [488] Train Loss: 0.1503 | Train MAE: 0.1491 | Val Loss: 0.4207 | Val MAE: 0.4196 | Test MAE: 0.4266 | Time: 26.9268
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [489] Train Loss: 0.1552 | Train MAE: 0.1540 | Val Loss: 0.4255 | Val MAE: 0.4243 | Test MAE: 0.4272 | Time: 25.5764
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [490] Train Loss: 0.1479 | Train MAE: 0.1466 | Val Loss: 0.4193 | Val MAE: 0.4181 | Test MAE: 0.4246 | Time: 29.5548
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [491] Train Loss: 0.1515 | Train MAE: 0.1503 | Val Loss: 0.4210 | Val MAE: 0.4198 | Test MAE: 0.4244 | Time: 24.7426
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [492] Train Loss: 0.1547 | Train MAE: 0.1534 | Val Loss: 0.4161 | Val MAE: 0.4150 | Test MAE: 0.4236 | Time: 25.5002
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [493] Train Loss: 0.1487 | Train MAE: 0.1475 | Val Loss: 0.4233 | Val MAE: 0.4221 | Test MAE: 0.4262 | Time: 26.0112
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [494] Train Loss: 0.1529 | Train MAE: 0.1517 | Val Loss: 0.4237 | Val MAE: 0.4225 | Test MAE: 0.4245 | Time: 24.1069
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [495] Train Loss: 0.1461 | Train MAE: 0.1448 | Val Loss: 0.4225 | Val MAE: 0.4214 | Test MAE: 0.4256 | Time: 25.3477
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [496] Train Loss: 0.1519 | Train MAE: 0.1507 | Val Loss: 0.4237 | Val MAE: 0.4226 | Test MAE: 0.4249 | Time: 29.0824
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [497] Train Loss: 0.1551 | Train MAE: 0.1539 | Val Loss: 0.4315 | Val MAE: 0.4303 | Test MAE: 0.4296 | Time: 25.9596
Epoch 00498: reducing learning rate of group 0 to 7.8125e-06.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [498] Train Loss: 0.1560 | Train MAE: 0.1548 | Val Loss: 0.4198 | Val MAE: 0.4186 | Test MAE: 0.4250 | Time: 24.9087
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [499] Train Loss: 0.1492 | Train MAE: 0.1480 | Val Loss: 0.4241 | Val MAE: 0.4230 | Test MAE: 0.4254 | Time: 27.1843
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [500] Train Loss: 0.1471 | Train MAE: 0.1458 | Val Loss: 0.4242 | Val MAE: 0.4231 | Test MAE: 0.4256 | Time: 25.8941
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [501] Train Loss: 0.1542 | Train MAE: 0.1530 | Val Loss: 0.4318 | Val MAE: 0.4306 | Test MAE: 0.4299 | Time: 26.1618
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [502] Train Loss: 0.1551 | Train MAE: 0.1539 | Val Loss: 0.4241 | Val MAE: 0.4229 | Test MAE: 0.4272 | Time: 28.6323
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [503] Train Loss: 0.1514 | Train MAE: 0.1502 | Val Loss: 0.4265 | Val MAE: 0.4254 | Test MAE: 0.4267 | Time: 26.3216
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [504] Train Loss: 0.1516 | Train MAE: 0.1504 | Val Loss: 0.4246 | Val MAE: 0.4234 | Test MAE: 0.4257 | Time: 25.0494
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [505] Train Loss: 0.1551 | Train MAE: 0.1539 | Val Loss: 0.4206 | Val MAE: 0.4194 | Test MAE: 0.4256 | Time: 26.3163
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [506] Train Loss: 0.1536 | Train MAE: 0.1524 | Val Loss: 0.4263 | Val MAE: 0.4252 | Test MAE: 0.4286 | Time: 25.6054
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [507] Train Loss: 0.1518 | Train MAE: 0.1506 | Val Loss: 0.4226 | Val MAE: 0.4215 | Test MAE: 0.4251 | Time: 26.2643
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [508] Train Loss: 0.1494 | Train MAE: 0.1482 | Val Loss: 0.4232 | Val MAE: 0.4220 | Test MAE: 0.4263 | Time: 26.7001
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [509] Train Loss: 0.1494 | Train MAE: 0.1481 | Val Loss: 0.4171 | Val MAE: 0.4160 | Test MAE: 0.4263 | Time: 24.6406
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [510] Train Loss: 0.1511 | Train MAE: 0.1499 | Val Loss: 0.4197 | Val MAE: 0.4186 | Test MAE: 0.4252 | Time: 25.9953
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [511] Train Loss: 0.1509 | Train MAE: 0.1497 | Val Loss: 0.4252 | Val MAE: 0.4240 | Test MAE: 0.4284 | Time: 24.4777
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [512] Train Loss: 0.1480 | Train MAE: 0.1467 | Val Loss: 0.4246 | Val MAE: 0.4235 | Test MAE: 0.4266 | Time: 28.9410
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [513] Train Loss: 0.1543 | Train MAE: 0.1531 | Val Loss: 0.4257 | Val MAE: 0.4245 | Test MAE: 0.4269 | Time: 25.8781
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [514] Train Loss: 0.1488 | Train MAE: 0.1476 | Val Loss: 0.4232 | Val MAE: 0.4221 | Test MAE: 0.4250 | Time: 25.1363
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [515] Train Loss: 0.1505 | Train MAE: 0.1493 | Val Loss: 0.4240 | Val MAE: 0.4228 | Test MAE: 0.4250 | Time: 26.1083
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [516] Train Loss: 0.1496 | Train MAE: 0.1484 | Val Loss: 0.4197 | Val MAE: 0.4186 | Test MAE: 0.4253 | Time: 25.3385
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [517] Train Loss: 0.1531 | Train MAE: 0.1518 | Val Loss: 0.4254 | Val MAE: 0.4242 | Test MAE: 0.4263 | Time: 27.8308
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [518] Train Loss: 0.1643 | Train MAE: 0.1631 | Val Loss: 0.4175 | Val MAE: 0.4164 | Test MAE: 0.4271 | Time: 25.7633
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [519] Train Loss: 0.1523 | Train MAE: 0.1511 | Val Loss: 0.4205 | Val MAE: 0.4194 | Test MAE: 0.4242 | Time: 25.1265
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [520] Train Loss: 0.1481 | Train MAE: 0.1469 | Val Loss: 0.4244 | Val MAE: 0.4233 | Test MAE: 0.4251 | Time: 28.4751
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [521] Train Loss: 0.1544 | Train MAE: 0.1532 | Val Loss: 0.4278 | Val MAE: 0.4266 | Test MAE: 0.4283 | Time: 25.1145
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [522] Train Loss: 0.1530 | Train MAE: 0.1518 | Val Loss: 0.4256 | Val MAE: 0.4245 | Test MAE: 0.4260 | Time: 25.6666
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [523] Train Loss: 0.1535 | Train MAE: 0.1523 | Val Loss: 0.4307 | Val MAE: 0.4295 | Test MAE: 0.4309 | Time: 27.6050
Epoch 00524: reducing learning rate of group 0 to 3.9063e-06.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [524] Train Loss: 0.1503 | Train MAE: 0.1491 | Val Loss: 0.4211 | Val MAE: 0.4200 | Test MAE: 0.4241 | Time: 26.7680
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [525] Train Loss: 0.1502 | Train MAE: 0.1490 | Val Loss: 0.4226 | Val MAE: 0.4215 | Test MAE: 0.4264 | Time: 27.1242
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [526] Train Loss: 0.1491 | Train MAE: 0.1479 | Val Loss: 0.4319 | Val MAE: 0.4307 | Test MAE: 0.4288 | Time: 25.6604
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [527] Train Loss: 0.1469 | Train MAE: 0.1457 | Val Loss: 0.4253 | Val MAE: 0.4242 | Test MAE: 0.4256 | Time: 28.3932
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [528] Train Loss: 0.1530 | Train MAE: 0.1518 | Val Loss: 0.4336 | Val MAE: 0.4325 | Test MAE: 0.4306 | Time: 30.9023
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [529] Train Loss: 0.1494 | Train MAE: 0.1482 | Val Loss: 0.4301 | Val MAE: 0.4289 | Test MAE: 0.4345 | Time: 25.7853
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [530] Train Loss: 0.1510 | Train MAE: 0.1498 | Val Loss: 0.4211 | Val MAE: 0.4199 | Test MAE: 0.4252 | Time: 27.7554
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [531] Train Loss: 0.1483 | Train MAE: 0.1471 | Val Loss: 0.4252 | Val MAE: 0.4240 | Test MAE: 0.4272 | Time: 27.5709
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [532] Train Loss: 0.1454 | Train MAE: 0.1442 | Val Loss: 0.4254 | Val MAE: 0.4242 | Test MAE: 0.4275 | Time: 26.1852
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [533] Train Loss: 0.1547 | Train MAE: 0.1535 | Val Loss: 0.4273 | Val MAE: 0.4261 | Test MAE: 0.4281 | Time: 28.2465
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [534] Train Loss: 0.1567 | Train MAE: 0.1555 | Val Loss: 0.4143 | Val MAE: 0.4132 | Test MAE: 0.4251 | Time: 25.1237
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [535] Train Loss: 0.1476 | Train MAE: 0.1464 | Val Loss: 0.4224 | Val MAE: 0.4212 | Test MAE: 0.4261 | Time: 27.3114
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [536] Train Loss: 0.1538 | Train MAE: 0.1525 | Val Loss: 0.4263 | Val MAE: 0.4251 | Test MAE: 0.4281 | Time: 27.5827
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [537] Train Loss: 0.1514 | Train MAE: 0.1502 | Val Loss: 0.4169 | Val MAE: 0.4157 | Test MAE: 0.4247 | Time: 26.5411
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [538] Train Loss: 0.1604 | Train MAE: 0.1592 | Val Loss: 0.4210 | Val MAE: 0.4198 | Test MAE: 0.4252 | Time: 26.6691
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [539] Train Loss: 0.1513 | Train MAE: 0.1501 | Val Loss: 0.4238 | Val MAE: 0.4226 | Test MAE: 0.4256 | Time: 27.7598
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [540] Train Loss: 0.1532 | Train MAE: 0.1520 | Val Loss: 0.4176 | Val MAE: 0.4164 | Test MAE: 0.4252 | Time: 28.9041
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [541] Train Loss: 0.1540 | Train MAE: 0.1527 | Val Loss: 0.4184 | Val MAE: 0.4172 | Test MAE: 0.4253 | Time: 28.0939
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [542] Train Loss: 0.1544 | Train MAE: 0.1532 | Val Loss: 0.4264 | Val MAE: 0.4253 | Test MAE: 0.4267 | Time: 26.1643
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [543] Train Loss: 0.1576 | Train MAE: 0.1564 | Val Loss: 0.4272 | Val MAE: 0.4260 | Test MAE: 0.4267 | Time: 27.7866
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [544] Train Loss: 0.1540 | Train MAE: 0.1528 | Val Loss: 0.4233 | Val MAE: 0.4222 | Test MAE: 0.4254 | Time: 27.1444
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [545] Train Loss: 0.1534 | Train MAE: 0.1522 | Val Loss: 0.4177 | Val MAE: 0.4165 | Test MAE: 0.4255 | Time: 26.4292
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [546] Train Loss: 0.1511 | Train MAE: 0.1498 | Val Loss: 0.4193 | Val MAE: 0.4181 | Test MAE: 0.4241 | Time: 27.7730
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [547] Train Loss: 0.1511 | Train MAE: 0.1499 | Val Loss: 0.4195 | Val MAE: 0.4184 | Test MAE: 0.4246 | Time: 27.3597
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [548] Train Loss: 0.1671 | Train MAE: 0.1659 | Val Loss: 0.4198 | Val MAE: 0.4186 | Test MAE: 0.4248 | Time: 29.2465
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [549] Train Loss: 0.1533 | Train MAE: 0.1521 | Val Loss: 0.4194 | Val MAE: 0.4182 | Test MAE: 0.4246 | Time: 26.5619
Epoch 00550: reducing learning rate of group 0 to 1.9531e-06.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [550] Train Loss: 0.1426 | Train MAE: 0.1414 | Val Loss: 0.4191 | Val MAE: 0.4179 | Test MAE: 0.4252 | Time: 26.5030
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [551] Train Loss: 0.1486 | Train MAE: 0.1474 | Val Loss: 0.4212 | Val MAE: 0.4200 | Test MAE: 0.4258 | Time: 28.3637
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [552] Train Loss: 0.1494 | Train MAE: 0.1481 | Val Loss: 0.4185 | Val MAE: 0.4173 | Test MAE: 0.4258 | Time: 26.6042
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [553] Train Loss: 0.1485 | Train MAE: 0.1473 | Val Loss: 0.4236 | Val MAE: 0.4224 | Test MAE: 0.4262 | Time: 25.5306
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [554] Train Loss: 0.1561 | Train MAE: 0.1549 | Val Loss: 0.4201 | Val MAE: 0.4190 | Test MAE: 0.4272 | Time: 27.0456
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [555] Train Loss: 0.1515 | Train MAE: 0.1502 | Val Loss: 0.4243 | Val MAE: 0.4232 | Test MAE: 0.4259 | Time: 26.3133
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [556] Train Loss: 0.1550 | Train MAE: 0.1537 | Val Loss: 0.4207 | Val MAE: 0.4196 | Test MAE: 0.4262 | Time: 26.3608
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [557] Train Loss: 0.1558 | Train MAE: 0.1546 | Val Loss: 0.4197 | Val MAE: 0.4186 | Test MAE: 0.4243 | Time: 26.1099
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [558] Train Loss: 0.1458 | Train MAE: 0.1446 | Val Loss: 0.4219 | Val MAE: 0.4207 | Test MAE: 0.4253 | Time: 26.2872
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [559] Train Loss: 0.1481 | Train MAE: 0.1469 | Val Loss: 0.4201 | Val MAE: 0.4189 | Test MAE: 0.4245 | Time: 26.1793
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [560] Train Loss: 0.1556 | Train MAE: 0.1544 | Val Loss: 0.4169 | Val MAE: 0.4158 | Test MAE: 0.4262 | Time: 26.3113
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [561] Train Loss: 0.1505 | Train MAE: 0.1493 | Val Loss: 0.4285 | Val MAE: 0.4273 | Test MAE: 0.4302 | Time: 28.0626
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [562] Train Loss: 0.1486 | Train MAE: 0.1474 | Val Loss: 0.4275 | Val MAE: 0.4264 | Test MAE: 0.4282 | Time: 25.5396
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [563] Train Loss: 0.1514 | Train MAE: 0.1502 | Val Loss: 0.4229 | Val MAE: 0.4218 | Test MAE: 0.4254 | Time: 26.6153
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [564] Train Loss: 0.1521 | Train MAE: 0.1509 | Val Loss: 0.4267 | Val MAE: 0.4255 | Test MAE: 0.4258 | Time: 28.3257
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [565] Train Loss: 0.1494 | Train MAE: 0.1482 | Val Loss: 0.4243 | Val MAE: 0.4232 | Test MAE: 0.4268 | Time: 25.4896
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [566] Train Loss: 0.1548 | Train MAE: 0.1536 | Val Loss: 0.4224 | Val MAE: 0.4212 | Test MAE: 0.4262 | Time: 26.9239
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [567] Train Loss: 0.1476 | Train MAE: 0.1464 | Val Loss: 0.4279 | Val MAE: 0.4268 | Test MAE: 0.4280 | Time: 25.3637
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [568] Train Loss: 0.1539 | Train MAE: 0.1527 | Val Loss: 0.4229 | Val MAE: 0.4217 | Test MAE: 0.4249 | Time: 25.8288
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [569] Train Loss: 0.1524 | Train MAE: 0.1512 | Val Loss: 0.4187 | Val MAE: 0.4175 | Test MAE: 0.4256 | Time: 25.9451
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [570] Train Loss: 0.1605 | Train MAE: 0.1593 | Val Loss: 0.4212 | Val MAE: 0.4201 | Test MAE: 0.4255 | Time: 26.6193
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [571] Train Loss: 0.1471 | Train MAE: 0.1459 | Val Loss: 0.4188 | Val MAE: 0.4177 | Test MAE: 0.4251 | Time: 26.3312
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [572] Train Loss: 0.1524 | Train MAE: 0.1512 | Val Loss: 0.4279 | Val MAE: 0.4268 | Test MAE: 0.4279 | Time: 25.9796
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [573] Train Loss: 0.1437 | Train MAE: 0.1425 | Val Loss: 0.4215 | Val MAE: 0.4203 | Test MAE: 0.4270 | Time: 26.7004
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [574] Train Loss: 0.1450 | Train MAE: 0.1438 | Val Loss: 0.4229 | Val MAE: 0.4217 | Test MAE: 0.4268 | Time: 26.0529
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Epoch [575] Train Loss: 0.1576 | Train MAE: 0.1564 | Val Loss: 0.4176 | Val MAE: 0.4165 | Test MAE: 0.4254 | Time: 25.9808
Epoch 00576: reducing learning rate of group 0 to 9.7656e-07.

!! LR EQUAL TO MIN LR SET.
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
/afs/crc.nd.edu/user/p/psoga/gnn-lspe/data/molecules.py:294: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  # labels = torch.from_numpy(np.array(labels, dtype=np.float32)).unsqueeze(1)
Test MAE: 0.4254
Train MAE: 0.1287
Convergence Time (Epochs): 575.0000
TOTAL TIME TAKEN: 15487.9801s
AVG TIME PER EPOCH: 26.5000s
